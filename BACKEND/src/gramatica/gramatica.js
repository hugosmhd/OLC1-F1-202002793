/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[42,43,44,45,46],$V1=[2,32],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,22],$V7=[1,19],$V8=[1,18],$V9=[1,23],$Va=[1,20],$Vb=[1,21],$Vc=[2,5,23,24,28,29,31,35,36,39,40,41,42,43,44,45,46,48,49],$Vd=[1,39],$Ve=[1,40],$Vf=[1,59],$Vg=[1,63],$Vh=[1,52],$Vi=[1,53],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,60],$Vp=[8,26,33,50,51,52,53,54,55,62,63,64,65,66,67,68,69,70],$Vq=[2,5,23,24,27,28,29,31,35,36,39,40,41,42,43,44,45,46,48,49],$Vr=[20,22],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[8,26,33,50,51,62,63,64,65,66,67,68,69,70],$VI=[8,26,33,50,51,52,53,55,62,63,64,65,66,67,68,69,70],$VJ=[8,26,33,62,63,68,69,70],$VK=[8,26,33,62,63,64,65,66,67,68,69,70],$VL=[31,35,36],$VM=[2,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptcoma":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"WHILE":12,"PRINT":13,"INCREMENT":14,"DECREMENT":15,"BLOQUEINSTRUCCIONES":16,"TIPO_DECLARACION":17,"TIPODATO":18,"IDS":19,"igual":20,"EXPRESION":21,"coma":22,"identificador":23,"pr_if":24,"pabre":25,"pcierra":26,"pr_else":27,"pr_switch":28,"llabre":29,"CASEBLOQUE":30,"llcierra":31,"CASOSSWITCH":32,"dospts":33,"SWITCHINSTRUCCIONES":34,"pr_case":35,"pr_default":36,"BREAKOPTION":37,"pr_break":38,"pr_print":39,"pr_while":40,"pr_const":41,"pr_int":42,"pr_double":43,"pr_boolean":44,"pr_char":45,"pr_string":46,"BLOQUE":47,"masmas":48,"menosmenos":49,"mas":50,"menos":51,"por":52,"div":53,"pot":54,"modulo":55,"entero":56,"decimal":57,"caracter":58,"cadena":59,"pr_true":60,"pr_false":61,"igualigual":62,"diferente":63,"menorque":64,"mayorque":65,"menorigual":66,"mayorigual":67,"and":68,"or":69,"xor":70,"not":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",20:"igual",22:"coma",23:"identificador",24:"pr_if",25:"pabre",26:"pcierra",27:"pr_else",28:"pr_switch",29:"llabre",31:"llcierra",33:"dospts",35:"pr_case",36:"pr_default",38:"pr_break",39:"pr_print",40:"pr_while",41:"pr_const",42:"pr_int",43:"pr_double",44:"pr_boolean",45:"pr_char",46:"pr_string",48:"masmas",49:"menosmenos",50:"mas",51:"menos",52:"por",53:"div",54:"pot",55:"modulo",56:"entero",57:"decimal",58:"caracter",59:"cadena",60:"pr_true",61:"pr_false",62:"igualigual",63:"diferente",64:"menorque",65:"mayorque",66:"menorigual",67:"mayorigual",68:"and",69:"or",70:"xor",71:"not"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[7,5],[19,3],[19,1],[9,3],[10,5],[10,7],[10,7],[11,7],[30,4],[30,0],[32,2],[32,1],[34,1],[37,2],[37,0],[13,4],[12,5],[17,1],[17,0],[18,1],[18,1],[18,1],[18,1],[18,1],[16,3],[16,2],[47,3],[47,2],[14,2],[14,2],[15,2],[15,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[21,1],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];        
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 10: case 11:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 12:
 this.$=$$[$0]; 
break;
case 13:
 
        const singleton = Singleton.getInstance();
        var errors = new Issue("Sintactico", "Error sintactico, verificar entrada", this._$.first_line, this._$.first_column + 1); 
        singleton.add_errores(errors); 
break;
case 14:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 15:
$$[$0-2].push($$[$0]);
break;
case 16:
this.$ = [$$[$0]]
break;
case 18:
this.$ = new If($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 19: case 20:
 this.$ = new If($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 21:
this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 22: case 26: case 70: case 71:
this.$ = $$[$0]
break;
case 24:
console.log($$[$0-1])
break;
case 29:
this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 30:
this.$ = new While($$[$0-2], $$[$0]);
break;
case 33:
this.$=Type.INT;
break;
case 34:
this.$=Type.DOUBLE;
break;
case 35:
this.$=Type.BOOLEAN;
break;
case 36:
this.$=Type.CHAR;
break;
case 37:
this.$=Type.STRING;
break;
case 38: case 40:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 42:
this.$ = new Incremento($$[$0], IncrementOption.MASMAS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 43:
this.$ = new Incremento($$[$0-1], IncrementOption.MASMAS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 44:
this.$ = new Decremento($$[$0], DecrementOption.MENOSMENOS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 45:
this.$ = new Decremento($$[$0-1], DecrementOption.MENOSMENOS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 46:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 47:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 48:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 49:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 50:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 51:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 52:
this.$= new Arithmetic($$[$0],null,ArithmeticOption.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 53:
this.$=new Literal($$[$0],Type.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 54:
this.$=new Literal($$[$0],Type.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 55:
this.$=new Literal($$[$0],Type.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 56:
this.$=new Literal($$[$0],Type.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 57: case 58:
this.$=new Literal($$[$0],Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 59:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 60:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new Logical($$[$0], null, LogicalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,2:$V2,23:$V3,24:$V4,28:$V5,29:$V6,39:$V7,40:$V8,41:$V9,48:$Va,49:$Vb}),{1:[3]},o($V0,$V1,{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,6:25,2:$V2,5:[1,24],23:$V3,24:$V4,28:$V5,29:$V6,39:$V7,40:$V8,41:$V9,48:$Va,49:$Vb}),o($Vc,[2,3]),{8:[1,26]},{8:[1,27]},o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),{8:[1,28]},{8:[1,29]},{8:[1,30]},o($Vc,[2,12]),{8:[1,31]},{18:32,42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37]},{20:[1,38],48:$Vd,49:$Ve},{25:[1,41]},{25:[1,42]},{25:[1,43]},{25:[1,44]},{23:[1,45]},{23:[1,46]},o($V0,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,4:47,2:$V2,23:$V3,24:$V4,28:$V5,29:$V6,31:[1,48],39:$V7,40:$V8,41:$V9,48:$Va,49:$Vb}),o($V0,[2,31]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,13]),{19:49,23:[1,50]},{23:[2,33]},{23:[2,34]},{23:[2,35]},{23:[2,36]},{23:[2,37]},{14:61,15:62,21:51,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},o($Vp,[2,43]),o($Vp,[2,45]),{14:61,15:62,21:64,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:65,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:66,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:67,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},o($Vp,[2,42]),o($Vp,[2,44]),o($V0,$V1,{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,6:25,2:$V2,23:$V3,24:$V4,28:$V5,29:$V6,31:[1,68],39:$V7,40:$V8,41:$V9,48:$Va,49:$Vb}),o($Vq,[2,39]),{20:[1,69],22:[1,70]},o($Vr,[2,16]),{8:[2,17],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{14:61,15:62,21:86,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},o($Vp,[2,53]),o($Vp,[2,54]),o($Vp,[2,55]),o($Vp,[2,56]),o($Vp,[2,57]),o($Vp,[2,58]),o($Vp,[2,59],{48:$Vd,49:$Ve}),{14:61,15:62,21:87,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},o($Vp,[2,70]),o($Vp,[2,71]),{14:61,15:62,21:88,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{26:[1,89],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{26:[1,90],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{26:[1,91],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{26:[1,92],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($Vq,[2,38]),{14:61,15:62,21:93,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{23:[1,94]},{14:61,15:62,21:95,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:96,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:97,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:98,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:99,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:100,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:101,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:102,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:103,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:104,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:105,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:106,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:107,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:108,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{14:61,15:62,21:109,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},o($Vp,[2,52]),o($Vp,[2,69]),{26:[1,110],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{16:111,29:$V6},{29:[1,112]},{16:113,29:$V6},{8:[2,29]},{8:[2,14],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($Vr,[2,15]),o($VH,[2,46],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VH,[2,47],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VI,[2,48],{54:$Vw}),o($VI,[2,49],{54:$Vw}),o($Vp,[2,50]),o($VI,[2,51],{54:$Vw}),o($VJ,[2,60],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,64:$VA,65:$VB,66:$VC,67:$VD}),o($VJ,[2,61],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,64:$VA,65:$VB,66:$VC,67:$VD}),o($VK,[2,62],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VK,[2,63],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VK,[2,64],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VK,[2,65],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o([8,26,33,68,69],[2,66],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,70:$VG}),o([8,26,33,69],[2,67],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,70:$VG}),o([8,26,33,68,69,70],[2,68],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($Vp,[2,72]),o($Vc,[2,18],{27:[1,114]}),o($VL,[2,23],{30:115}),o($Vc,[2,30]),{10:117,16:116,24:$V4,29:$V6},{31:[1,118],32:119,35:[1,120],36:[1,121]},o($Vc,[2,19]),o($Vc,[2,20]),o($Vc,[2,21]),{33:[1,122]},{14:61,15:62,21:123,23:$Vf,25:$Vg,48:$Va,49:$Vb,51:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,71:$Vo},{33:[2,25]},o($V0,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,34:124,4:125,2:$V2,23:$V3,24:$V4,28:$V5,29:$V6,39:$V7,40:$V8,41:$V9,48:$Va,49:$Vb}),{33:[2,24],50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($VL,[2,22]),o($V0,$V1,{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,6:25,2:$V2,23:$V3,24:$V4,28:$V5,29:$V6,31:$VM,35:$VM,36:$VM,39:$V7,40:$V8,41:$V9,48:$Va,49:$Vb})],
defaultActions: {24:[2,1],33:[2,33],34:[2,34],35:[2,35],36:[2,36],37:[2,37],92:[2,29],121:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    //codigo en JS
    //importaciones y declaraciones
    const {Declaracion} = require('../instrucciones/declaracion');
    const {If} = require('../instrucciones/if');
    const {Print} = require('../instrucciones/print');
    const {Switch} = require('../instrucciones/switch');
    const {Bloque} = require('../instrucciones/bloque')
    const {While} = require('../instrucciones/while')

    const {Literal} = require('../expresiones/literal')
    const {Type} = require('../symbols/type');
    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');
    const {Identificador} = require('../expresiones/identificador');
    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');
    const {Logical} = require('../expresiones/logical');
    const {LogicalOption} = require('../expresiones/logicalOptions');
    const {Incremento} = require('../expresiones/incremento');
    const {IncrementOption} = require('../expresiones/incrementOptions');
    const {Decremento} = require('../expresiones/decremento');
    const {DecrementOption} = require('../expresiones/decrementOptions');

    const {Issue} = require('../error/issue');
    const {Singleton} = require('../patron_singleton/singleton');



    var array_erroresLexicos;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 42;
break;
case 4:return 43;
break;
case 5:return 45;
break;
case 6:return 44;
break;
case 7:return 46;
break;
case 8:return 39;
break;
case 9:return 41;
break;
case 10:return 24;
break;
case 11:return 27;
break;
case 12:return 60;
break;
case 13:return 61;
break;
case 14:return 40;
break;
case 15:return 28
break;
case 16:return 35
break;
case 17:return 36
break;
case 18:return 38
break;
case 19:return 22;
break;
case 20:return 8;
break;
case 21:return 33;
break;
case 22:return 29;
break;
case 23:return 31;
break;
case 24:return 25;
break;
case 25:return 26;
break;
case 26:return 54;
break;
case 27:return 55;
break;
case 28:return 48;
break;
case 29:return 50;
break;
case 30:return 49;
break;
case 31:return 51;
break;
case 32:return 52;
break;
case 33:return 53;
break;
case 34:return 68;
break;
case 35:return 69;
break;
case 36:return 70;
break;
case 37:return 66;
break;
case 38:return 64;
break;
case 39:return 67;
break;
case 40:return 65;
break;
case 41:return 62;
break;
case 42:return 20;
break;
case 43:return 63;
break;
case 44:return 71;
break;
case 45: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 47:return 57;
break;
case 48:return 56;
break;
case 49:return 23;
break;
case 50:return 5;
break;
case 51: 
                        // console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        const singleton = Singleton.getInstance();
                        const error = new Issue("Lexico", "Caracter que lo proboco: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1); 
                        singleton.add_errores(error);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}