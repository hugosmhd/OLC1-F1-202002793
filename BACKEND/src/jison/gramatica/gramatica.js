/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,21],$V2=[1,22],$V3=[1,44],$V4=[1,30],$V5=[1,34],$V6=[1,43],$V7=[1,42],$V8=[1,28],$V9=[1,41],$Va=[1,31],$Vb=[1,32],$Vc=[1,40],$Vd=[1,36],$Ve=[1,37],$Vf=[1,33],$Vg=[1,35],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,38],$Vn=[1,39],$Vo=[2,5,25,26,31,37,45,49,50,52,56,57,60,61,63,65,66,67,69,70,71,72,73,74,75,76,77,82],$Vp=[1,72],$Vq=[1,73],$Vr=[1,75],$Vs=[1,103],$Vt=[1,98],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[1,94],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,99],$VC=[1,104],$VD=[1,105],$VE=[1,106],$VF=[1,107],$VG=[37,38],$VH=[1,111],$VI=[1,113],$VJ=[40,44],$VK=[2,57],$VL=[8,33,36,39,44,83,84,85,86,87,88,95,96,97,98,99,100,101,102,103],$VM=[1,117],$VN=[2,85],$VO=[2,5,25,26,31,37,45,49,50,52,56,57,59,60,61,63,65,66,67,69,70,71,72,73,74,75,76,77,82],$VP=[1,136],$VQ=[1,137],$VR=[1,138],$VS=[1,139],$VT=[1,140],$VU=[1,141],$VV=[1,142],$VW=[1,143],$VX=[1,144],$VY=[1,145],$VZ=[1,146],$V_=[1,147],$V$=[1,148],$V01=[1,149],$V11=[1,150],$V21=[33,44],$V31=[2,62],$V41=[2,52],$V51=[1,209],$V61=[1,229],$V71=[1,226],$V81=[1,227],$V91=[1,230],$Va1=[8,36],$Vb1=[1,239],$Vc1=[8,33,36,39,44,83,84,95,96,97,98,99,100,101,102,103],$Vd1=[8,33,36,39,44,83,84,85,86,88,95,96,97,98,99,100,101,102,103],$Ve1=[8,33,36,39,44,95,96,97,98,99,100,101,102,103],$Vf1=[1,255],$Vg1=[1,259],$Vh1=[1,258],$Vi1=[1,278],$Vj1=[1,279],$Vk1=[63,65,66],$Vl1=[1,317],$Vm1=[39,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptcoma":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"FUNCIONES":12,"WHILE":13,"FOR":14,"DOWHILE":15,"PRINT":16,"INCREMENT":17,"PUSH":18,"POP":19,"SPLICE":20,"DECREMENT":21,"BLOQUEINSTRUCCIONES":22,"METODOS":23,"LLAMADA_METODO":24,"pr_break":25,"pr_continue":26,"RETURN":27,"DECLARACIONARRAY":28,"ARRAYEXPRES":29,"TERNARIO_INST":30,"pabre":31,"EXPRESION":32,"pcierra":33,"icierra":34,"TERNARIO_OP":35,"dospts":36,"identificador":37,"cabre":38,"ccierra":39,"igual":40,"TIPODATO":41,"EXPRESIONES_ARRAY":42,"ARRAY_VALORES":43,"coma":44,"pr_for":45,"INICIALIZACION":46,"CONDICION":47,"ACTUALIZACION":48,"pr_return":49,"pr_call":50,"LISTA_PASO_PARAMETROS":51,"pr_const":52,"IDS":53,"LISTA_PARAMETROS":54,"BLOQUE":55,"pr_void":56,"pr_if":57,"IF_INSTRUCCIONES":58,"pr_else":59,"pr_switch":60,"llabre":61,"LISTACASE":62,"llcierra":63,"CASEBLOQUE":64,"pr_case":65,"pr_default":66,"pr_print":67,"EXP_PRINT":68,"pr_println":69,"pr_while":70,"pr_do":71,"pr_int":72,"pr_double":73,"pr_boolean":74,"pr_char":75,"pr_string":76,"masmas":77,"punto":78,"pr_push":79,"pr_pop":80,"pr_splice":81,"menosmenos":82,"mas":83,"menos":84,"por":85,"div":86,"pot":87,"modulo":88,"entero":89,"decimal":90,"caracter":91,"cadena":92,"pr_true":93,"pr_false":94,"igualigual":95,"diferente":96,"menorque":97,"mayorque":98,"menorigual":99,"mayorigual":100,"and":101,"or":102,"xor":103,"not":104,"pr_typeof":105,"pr_length":106,"pr_toCharArray":107,"pr_indexOf":108,"pr_new":109,"TERNARIO_EXP":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",25:"pr_break",26:"pr_continue",31:"pabre",33:"pcierra",34:"icierra",36:"dospts",37:"identificador",38:"cabre",39:"ccierra",40:"igual",44:"coma",45:"pr_for",49:"pr_return",50:"pr_call",52:"pr_const",56:"pr_void",57:"pr_if",59:"pr_else",60:"pr_switch",61:"llabre",63:"llcierra",65:"pr_case",66:"pr_default",67:"pr_print",69:"pr_println",70:"pr_while",71:"pr_do",72:"pr_int",73:"pr_double",74:"pr_boolean",75:"pr_char",76:"pr_string",77:"masmas",78:"punto",79:"pr_push",80:"pr_pop",81:"pr_splice",82:"menosmenos",83:"mas",84:"menos",85:"por",86:"div",87:"pot",88:"modulo",89:"entero",90:"decimal",91:"caracter",92:"cadena",93:"pr_true",94:"pr_false",95:"igualigual",96:"diferente",97:"menorque",98:"mayorque",99:"menorigual",100:"mayorigual",101:"and",102:"or",103:"xor",104:"not",105:"pr_typeof",106:"pr_length",107:"pr_toCharArray",108:"pr_indexOf",109:"pr_new"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[30,7],[35,1],[35,1],[35,1],[35,1],[35,1],[29,6],[29,9],[28,6],[28,8],[43,3],[43,1],[14,7],[46,1],[46,1],[47,2],[48,2],[48,2],[48,2],[27,2],[27,1],[24,5],[51,3],[51,1],[51,0],[7,5],[7,4],[12,6],[53,3],[53,1],[9,3],[23,6],[54,4],[54,2],[54,0],[10,5],[10,7],[10,7],[58,2],[58,2],[58,2],[58,2],[58,2],[58,1],[58,2],[58,2],[58,2],[58,2],[58,2],[11,7],[62,2],[62,1],[64,4],[64,3],[16,4],[16,4],[68,1],[68,0],[13,5],[15,6],[41,1],[41,1],[41,1],[41,1],[41,1],[22,3],[22,2],[55,3],[55,2],[17,2],[17,2],[18,6],[19,5],[20,8],[21,2],[21,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,3],[32,4],[32,4],[32,4],[32,4],[32,6],[32,8],[32,4],[32,7],[32,1],[42,8],[42,5],[42,3],[42,9],[110,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];        
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 11: case 13: case 14: case 15: case 16: case 17: case 20: case 23: case 24: case 25: case 26: case 66: case 67: case 69: case 70: case 72: case 75:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 9: case 10: case 18: case 19: case 71:
 this.$=$$[$0]; 
break;
case 21: case 73:
 this.$= new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 22: case 74:
 this.$= new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 27: case 76:
 
        const singleton = Singleton.getInstance();
        var errors = new Issue("Sintactico", "Error sintactico, verificar entrada", this._$.first_line, this._$.first_column + 1); 
        singleton.add_errores(errors); 
break;
case 28: case 145:
 this.$ = new Ternario($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 29: case 30: case 31: case 32: case 33: case 140:
 this.$ = $$[$0] 
break;
case 34:
this.$ = new Asignacion_array($$[$0-5], $$[$0-3], null, $$[$0], 1, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 35:
this.$ = new Asignacion_array($$[$0-8], $$[$0-6], $$[$0-3], $$[$0], 2, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 36:
this.$ = new Declaracion_array($$[$0-5], null, $$[$0-4], 1, $$[$0], null, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 37:
this.$ = new Declaracion_array($$[$0-7], null, $$[$0-6], 2, $$[$0], null, _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 38:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 39:
 this.$ = [$$[$0]]; 
break;
case 40:
this.$ = new For($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 41: case 42: case 43: case 44: case 45: case 46: case 84: case 128: case 129: case 130:
this.$ = $$[$0]
break;
case 47:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 49:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column )
break;
case 50: case 56:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 51: case 57: case 79:
this.$ = [$$[$0]]
break;
case 52: case 62:
this.$ = []
break;
case 53:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 54:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 58:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 59:
this.$= new Metodo(null, $$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 60:
$$[$0-3].push({'tipo': $$[$0-1], 'id': $$[$0]}); this.$ = $$[$0-3]
break;
case 61:
this.$ = [{'tipo': $$[$0-1], 'id': $$[$0]}]
break;
case 63:
this.$ = new If($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 64: case 65:
 this.$ = new If($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 77:
this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 78:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]
break;
case 80:
this.$ = new CaseSwitch("case", $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 81:
this.$ = new CaseSwitch("default", null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 82:
this.$ = new Print(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 83:
this.$ = new Print(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 86:
this.$ = new While($$[$0-2], $$[$0]);
break;
case 87:
this.$ = new DoWhile($$[$0-1], $$[$0-4]);
break;
case 88:
this.$=Type.INT;
break;
case 89:
this.$=Type.DOUBLE;
break;
case 90:
this.$=Type.BOOLEAN;
break;
case 91:
this.$=Type.CHAR;
break;
case 92:
this.$=Type.STRING;
break;
case 93: case 95:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 94: case 96:
 this.$= new Bloque(null,_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 97:
this.$ = new Incremento($$[$0], IncrementOption.MASMAS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 98:
this.$ = new Incremento($$[$0-1], IncrementOption.MASMAS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 99:
 this.$ = new Push($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 100:
 this.$ = new Pop($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 101:
 this.$ = new Splice($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 102:
this.$ = new Decremento($$[$0], DecrementOption.MENOSMENOS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 103:
this.$ = new Decremento($$[$0-1], DecrementOption.MENOSMENOS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$= new Arithmetic($$[$0],null,ArithmeticOption.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 111:
this.$=new Literal($$[$0],Type.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 112:
this.$=new Literal($$[$0],Type.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 113:
this.$=new Literal($$[$0],Type.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 114:
this.$=new Literal($$[$0],Type.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 115: case 116:
this.$=new Literal($$[$0],Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 117:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 118:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 120:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 121:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 122:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 123:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 124:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 125:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 126:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
this.$ = new Logical($$[$0], null, LogicalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 131:
this.$ = $$[$0-1]
break;
case 132:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 133:
 this.$= new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 134:
 this.$= new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 135:
 this.$= new ToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 136:
 this.$= new IndexOf($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 137: case 141:
 this.$ = new ArrayValues($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 138:
 this.$= new ArrayRetorno($$[$0-3], $$[$0-1], null, 1, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 139:
 this.$= new ArrayRetorno($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 142:
 this.$ = new ArrayValues($$[$0-3], $$[$0-1], null, 1, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 143:
 this.$ = new ArrayValues(null, $$[$0-1], null, 1, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 144:
 this.$ = new ArrayValues(null, $$[$0-6], $$[$0-2], 2, _$[$0-8].first_line, _$[$0-8].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},{1:[3]},{2:$V0,5:[1,50],6:51,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},o($Vo,[2,3]),{8:[1,52]},{8:[1,53]},o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},o($Vo,[2,18]),o($Vo,[2,19]),{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{8:[1,68]},{41:69,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{37:[1,71],53:70},{38:[1,76],40:$Vp,77:$Vq,78:[1,74],82:$Vr},{31:[1,77]},{31:[1,78]},{31:[1,79]},{31:[1,80]},{22:81,61:$Vc},{31:[1,82]},{31:[1,83]},{37:[1,84]},{37:[1,85]},{2:$V0,4:86,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,63:[1,87],67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},{37:[1,88]},{37:[1,89]},{8:[2,48],17:100,18:101,21:102,31:$Vs,32:90,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:109,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VG,[2,88]),o($VG,[2,89]),o($VG,[2,90]),o($VG,[2,91]),o($VG,[2,92]),{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),{37:$VH,53:110},{40:[1,112],44:$VI},o($VJ,$VK,{31:[1,114],38:[1,115]}),{17:100,18:101,21:102,31:$Vs,32:116,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,98]),{79:$VM,80:[1,118],81:[1,119]},o($VL,[2,103]),{17:100,18:101,21:102,31:$Vs,32:120,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:121,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:122,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:123,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{7:125,9:126,37:[1,128],41:127,46:124,52:$V8,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{70:[1,129]},{17:100,18:101,21:102,31:$Vs,32:131,33:$VN,37:$Vt,68:130,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:131,33:$VN,37:$Vt,68:132,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,97]),o($VL,[2,102]),{2:$V0,6:51,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,63:[1,133],67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},o($VO,[2,94]),{31:[1,134]},{31:[1,135]},{8:[2,47],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{17:100,18:101,21:102,31:$Vs,32:151,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,111]),o($VL,[2,112]),o($VL,[2,113]),o($VL,[2,114]),o($VL,[2,115]),o($VL,[2,116]),o($VL,[2,117],{31:[1,152],38:[1,154],77:$Vq,78:[1,153],82:$Vr}),{17:100,18:101,21:102,31:$Vs,32:155,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,128]),o($VL,[2,129]),o($VL,[2,130]),{17:100,18:101,21:102,31:$Vs,32:156,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{31:[1,157]},{31:[1,158]},{31:[1,159]},{41:160,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},o($VL,[2,140]),{33:[1,161],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{40:[1,162],44:$VI},o($VJ,$VK),{17:100,18:101,21:102,31:$Vs,32:163,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{37:[1,164]},o($V21,$V31,{54:165,41:166,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl}),{39:[1,167]},o([8,33,36],[2,58],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11}),{31:[1,168]},{31:[1,169]},{31:[1,170]},{39:[1,171],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,172],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,173],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,174],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{8:[1,176],47:175},{8:[2,41]},{8:[2,42]},{37:$VH,53:70},{40:$Vp},{31:[1,177]},{33:[1,178]},{33:[2,84],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,179]},o($VO,[2,93]),o($V21,$V31,{41:166,54:180,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl}),o($V21,$V41,{17:100,18:101,21:102,110:108,51:181,32:182,31:$Vs,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF}),{17:100,18:101,21:102,31:$Vs,32:183,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:184,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:185,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:186,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:187,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:188,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:189,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:190,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:191,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:192,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:193,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:194,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:195,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:196,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:197,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,110]),o($V21,$V41,{17:100,18:101,21:102,110:108,32:182,51:198,31:$Vs,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF}),{79:$VM,108:[1,199]},{17:100,18:101,21:102,31:$Vs,32:200,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,127]),{33:[1,201],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{17:100,18:101,21:102,31:$Vs,32:202,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:203,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:204,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{38:[1,205]},{34:[1,206]},{17:100,18:101,21:102,31:$Vs,32:207,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{8:[2,54],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},o($VJ,[2,56]),{33:[1,208],44:$V51},{37:[1,210]},{38:[1,212],40:[1,211]},{17:100,18:101,21:102,31:$Vs,32:213,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{33:[1,214]},{17:100,18:101,21:102,31:$Vs,32:215,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{38:[1,217],40:[1,216]},{2:$V61,7:219,9:220,16:221,17:222,21:223,22:224,24:225,25:$V71,26:$V81,27:228,37:$V91,41:127,49:$V6,50:$V7,52:$V8,58:218,61:$Vc,67:$Vd,69:$Ve,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},{61:[1,231]},{22:232,61:$Vc},{8:[1,234],48:233},{17:100,18:101,21:102,31:$Vs,32:235,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:236,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($Va1,[2,82]),o($Va1,[2,83]),{33:[1,237],44:$V51},{33:[1,238],44:$Vb1},o($V21,[2,51],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11}),o($Vc1,[2,104],{85:$VR,86:$VS,87:$VT,88:$VU}),o($Vc1,[2,105],{85:$VR,86:$VS,87:$VT,88:$VU}),o($Vd1,[2,106],{87:$VT}),o($Vd1,[2,107],{87:$VT}),o($VL,[2,108]),o($Vd1,[2,109],{87:$VT}),o($Ve1,[2,118],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU}),o($Ve1,[2,119],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU}),o($Ve1,[2,120],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU}),o($Ve1,[2,121],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU}),o($Ve1,[2,122],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU}),o($Ve1,[2,123],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU}),o([8,33,36,39,44,101,102],[2,124],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,103:$V11}),o([8,33,36,39,44,102],[2,125],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,103:$V11}),o([8,33,36,39,44,101,102,103],[2,126],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_}),{33:[1,240],44:$Vb1},{31:[1,241]},{39:[1,242],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},o($VL,[2,131],{34:[1,243]}),{33:[1,244],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,245],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,246],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{17:100,18:101,21:102,31:$Vs,32:247,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{9:251,16:249,17:252,21:253,24:250,35:248,37:$V91,50:$V7,67:$Vd,69:$Ve,77:$Vm,82:$Vn},{8:[2,53],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{55:254,61:$Vf1},{41:256,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},o($V21,[2,61]),{38:$Vg1,42:257,109:$Vh1},{39:[1,260]},{33:[1,261],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{8:[2,100]},{44:[1,262],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{17:100,18:101,21:102,31:$Vs,32:263,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:264,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($Vo,[2,63],{59:[1,265]}),{8:[1,266]},{8:[1,267]},{8:[1,268]},{8:[1,269]},{8:[1,270]},o($VO,[2,71]),{8:[1,271]},{8:[1,272]},{8:[1,273]},{8:[1,274]},{8:[1,275]},{40:$Vp,77:$Vq,82:$Vr},{62:276,64:277,65:$Vi1,66:$Vj1},o($Vo,[2,86]),{33:[1,280]},{9:283,17:281,21:282,37:$V91,77:$Vm,82:$Vn},{8:[2,43],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{33:[1,284],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{55:285,61:$Vf1},o($Va1,[2,49]),{17:100,18:101,21:102,31:$Vs,32:286,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,132]),{17:100,18:101,21:102,31:$Vs,32:287,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,138],{38:[1,288]}),{17:100,18:101,21:102,31:$Vs,32:289,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($VL,[2,133]),o($VL,[2,134]),o($VL,[2,135]),{39:[1,290],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{36:[1,291]},o($Va1,[2,29]),o($Va1,[2,30]),o($Va1,[2,31]),o($Va1,[2,32]),o($Va1,[2,33]),o($Vo,[2,55]),{2:$V0,4:292,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,63:[1,293],67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},{37:[1,294]},{8:[2,36]},{41:295,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{17:100,18:101,21:102,31:$Vs,32:298,37:$Vt,38:[1,297],43:296,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{40:[1,299]},o($VL,[2,99]),{17:100,18:101,21:102,31:$Vs,32:300,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{8:[2,34],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{39:[1,301],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{2:$V61,7:219,9:220,10:303,16:221,17:222,21:223,22:224,24:225,25:$V71,26:$V81,27:228,37:$V91,41:127,49:$V6,50:$V7,52:$V8,57:$Va,58:302,61:$Vc,67:$Vd,69:$Ve,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,68]),o($VO,[2,69]),o($VO,[2,70]),o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,74]),o($VO,[2,75]),o($VO,[2,76]),{63:[1,304],64:305,65:$Vi1,66:$Vj1},o($Vk1,[2,79]),{17:100,18:101,21:102,31:$Vs,32:306,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{36:[1,307]},{22:308,61:$Vc},{33:[2,44]},{33:[2,45]},{33:[2,46]},{8:[2,87]},o($Vo,[2,59]),o($V21,[2,50],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11}),{33:[1,309],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{17:100,18:101,21:102,31:$Vs,32:310,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{36:[1,311],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{38:[1,312]},{9:251,16:249,17:252,21:253,24:250,35:313,37:$V91,50:$V7,67:$Vd,69:$Ve,77:$Vm,82:$Vn},{2:$V0,6:51,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,63:[1,314],67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},o($Vo,[2,96]),o($V21,[2,60]),{38:[1,315]},{39:[1,316],44:$Vl1},{17:100,18:101,21:102,31:$Vs,32:298,37:$Vt,43:318,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},o($Vm1,[2,39],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11}),{38:$Vg1,42:319,109:$Vh1},{33:[1,320],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{40:[1,321]},o($Vo,[2,64]),o($Vo,[2,65]),o($Vo,[2,77]),o($Vk1,[2,78]),{36:[1,322],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{2:$V0,4:323,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},o($Vo,[2,40]),o($VL,[2,136]),{39:[1,324],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{17:100,18:101,21:102,31:$Vs,32:325,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:326,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{8:[2,28]},o($Vo,[2,95]),{17:100,18:101,21:102,31:$Vs,32:327,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{8:[2,143]},{17:100,18:101,21:102,31:$Vs,32:328,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{39:[1,329],44:$Vl1},{8:[2,37]},{8:[2,101]},{17:100,18:101,21:102,31:$Vs,32:330,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{2:$V0,4:331,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:$V3,37:$V4,41:29,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn},o($Vk1,[2,81],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,27:23,28:24,29:25,30:26,41:29,6:51,2:$V0,25:$V1,26:$V2,31:$V3,37:$V4,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn}),o($VL,[2,139]),o($VL,[2,145]),{39:[1,332],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{39:[1,333],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},o($Vm1,[2,38],{83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11}),{44:[1,334]},{8:[2,35],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},o($Vk1,[2,80],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,27:23,28:24,29:25,30:26,41:29,6:51,2:$V0,25:$V1,26:$V2,31:$V3,37:$V4,45:$V5,49:$V6,50:$V7,52:$V8,56:$V9,57:$Va,60:$Vb,61:$Vc,67:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,82:$Vn}),o($VL,[2,137]),{8:[2,142],38:[1,335]},{38:[1,336]},{17:100,18:101,21:102,31:$Vs,32:337,37:$Vt,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{17:100,18:101,21:102,31:$Vs,32:298,37:$Vt,43:338,77:$Vm,82:$Vn,84:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,104:$VB,105:$VC,106:$VD,107:$VE,109:$VF,110:108},{39:[1,339],83:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,102:$V01,103:$V11},{39:[1,340],44:$Vl1},{8:[2,141]},{39:[1,341]},{8:[2,144]}],
defaultActions: {50:[2,1],125:[2,41],126:[2,42],214:[2,100],257:[2,36],281:[2,44],282:[2,45],283:[2,46],284:[2,87],313:[2,28],316:[2,143],319:[2,37],320:[2,101],339:[2,141],341:[2,144]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignacion} = require('../instrucciones/asignar');
    const {If} = require('../instrucciones/if');
    const {Print} = require('../instrucciones/print');
    const {Switch} = require('../instrucciones/switch');
    const {Bloque} = require('../instrucciones/bloque')
    const {BloqueBreak} = require('../instrucciones/bloquebreak')
    const {While} = require('../instrucciones/while')
    const {For} = require('../instrucciones/for')
    const {DoWhile} = require('../instrucciones/dowhile')
    const {Metodo} = require('../instrucciones/metodo')
    const {Funcion} = require('../instrucciones/funcion')
    const {CaseSwitch} = require('../instrucciones/caseswitch')
    const {Break} = require('../instrucciones/break')
    const {Continue} = require('../instrucciones/continue')
    const {Return} = require('../instrucciones/return')
    const {Llamada} = require('../instrucciones/llamada')
    const {Declaracion_array} = require('../instrucciones/array_declaracion')
    const {Asignacion_array} = require('../instrucciones/array_asignacion')
    const {Pop} = require('../instrucciones/pop')
    const {Splice} = require('../instrucciones/splice')

    const {Type} = require('../symbols/type');

    const {Literal} = require('../expresiones/literal')
    const {Ternario} = require('../expresiones/ternario')
    const {ArrayValues} = require('../expresiones/arrayValues')
    const {ArrayRetorno} = require('../expresiones/arrayRetorno')
    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');
    const {Identificador} = require('../expresiones/identificador');
    const {Typeof} = require('../expresiones/typeof')
    const {Length} = require('../expresiones/length')
    const {ToCharArray} = require('../expresiones/toCharArray')
    const {IndexOf} = require('../expresiones/indexOf')
    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');
    const {Logical} = require('../expresiones/logical');
    const {LogicalOption} = require('../expresiones/logicalOptions');
    const {Incremento} = require('../expresiones/incremento');
    const {Push} = require('../expresiones/push');
    const {IncrementOption} = require('../expresiones/incrementOptions');
    const {Decremento} = require('../expresiones/decremento');
    const {DecrementOption} = require('../expresiones/decrementOptions');


    const {Issue} = require('../error/issue');
    const {Singleton} = require('../patron_singleton/singleton');
    var array_erroresLexicos;
    var tipoDeclaracion;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 72;
break;
case 4:return 73;
break;
case 5:return 75;
break;
case 6:return 74;
break;
case 7:return 76;
break;
case 8:return 67;
break;
case 9:return 69;
break;
case 10:return 52;
break;
case 11:return 57;
break;
case 12:return 59;
break;
case 13:return 93;
break;
case 14:return 94;
break;
case 15:return 71;
break;
case 16:return 70;
break;
case 17:return 60
break;
case 18:return 65
break;
case 19:return 66
break;
case 20:return 25
break;
case 21:return 26
break;
case 22:return 56
break;
case 23:return 50
break;
case 24:return 49
break;
case 25:return 105
break;
case 26:return 106
break;
case 27:return 107
break;
case 28:return 108
break;
case 29:return 45
break;
case 30:return 109
break;
case 31:return 79
break;
case 32:return 80
break;
case 33:return 81
break;
case 34:return 44;
break;
case 35:return 78;
break;
case 36:return 8;
break;
case 37:return 36;
break;
case 38:return 61;
break;
case 39:return 63;
break;
case 40:return 31;
break;
case 41:return 33;
break;
case 42:return 38;
break;
case 43:return 39;
break;
case 44:return 34;
break;
case 45:return 87;
break;
case 46:return 88;
break;
case 47:return 77;
break;
case 48:return 83;
break;
case 49:return 82;
break;
case 50:return 84;
break;
case 51:return 85;
break;
case 52:return 86;
break;
case 53:return 101;
break;
case 54:return 102;
break;
case 55:return 103;
break;
case 56:return 99;
break;
case 57:return 97;
break;
case 58:return 100;
break;
case 59:return 98;
break;
case 60:return 95;
break;
case 61:return 40;
break;
case 62:return 96;
break;
case 63:return 104;
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 92; 
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 91; 
break;
case 66:return 90;
break;
case 67:return 89;
break;
case 68:return 37;
break;
case 69:return 5;
break;
case 70: 
                        // console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        const singleton = Singleton.getInstance();
                        const error = new Issue("Lexico", "Caracter que lo proboco: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1); 
                        singleton.add_errores(error);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:typeof\b)/i,/^(?:length\b)/i,/^(?:toCharArray\b)/i,/^(?:indexOf\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9'_']*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}