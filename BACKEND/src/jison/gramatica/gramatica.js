/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,18],$V2=[1,19],$V3=[1,26],$V4=[1,30],$V5=[1,39],$V6=[1,38],$V7=[1,24],$V8=[1,37],$V9=[1,27],$Va=[1,28],$Vb=[1,36],$Vc=[1,32],$Vd=[1,33],$Ve=[1,29],$Vf=[1,31],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,34],$Vm=[1,35],$Vn=[2,5,22,23,27,36,42,43,45,49,50,53,54,56,58,60,61,63,64,65,66,67,68,69,70,71,72],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,88],$Vs=[1,92],$Vt=[1,81],$Vu=[1,82],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,87],$VA=[1,89],$VB=[1,93],$VC=[1,94],$VD=[27,28],$VE=[1,96],$VF=[1,98],$VG=[31,35],$VH=[2,49],$VI=[8,30,35,41,59,73,74,75,76,77,78,85,86,87,88,89,90,91,92,93],$VJ=[2,77],$VK=[2,5,22,23,27,36,42,43,45,49,50,52,53,54,56,58,60,61,63,64,65,66,67,68,69,70,71,72],$VL=[1,118],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[1,127],$VV=[1,128],$VW=[1,129],$VX=[1,130],$VY=[1,131],$VZ=[1,132],$V_=[35,41],$V$=[2,54],$V01=[2,44],$V11=[1,180],$V21=[1,197],$V31=[1,194],$V41=[1,195],$V51=[1,198],$V61=[1,207],$V71=[8,30,35,41,59,73,74,85,86,87,88,89,90,91,92,93],$V81=[8,30,35,41,59,73,74,75,76,78,85,86,87,88,89,90,91,92,93],$V91=[8,30,35,41,59,85,86,87,88,89,90,91,92,93],$Va1=[1,213],$Vb1=[1,233],$Vc1=[1,234],$Vd1=[56,58,60],$Ve1=[1,262],$Vf1=[30,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptcoma":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"FUNCIONES":12,"WHILE":13,"FOR":14,"DOWHILE":15,"PRINT":16,"INCREMENT":17,"DECREMENT":18,"BLOQUEINSTRUCCIONES":19,"METODOS":20,"LLAMADA_METODO":21,"pr_break":22,"pr_continue":23,"RETURN":24,"DECLARACIONARRAY":25,"ARRAYEXPRES":26,"identificador":27,"cabre":28,"EXPRESION":29,"ccierra":30,"igual":31,"TIPODATO":32,"pr_new":33,"ARRAY_VALORES":34,"coma":35,"pr_for":36,"pabre":37,"INICIALIZACION":38,"CONDICION":39,"ACTUALIZACION":40,"pcierra":41,"pr_return":42,"pr_call":43,"LISTA_PASO_PARAMETROS":44,"pr_const":45,"IDS":46,"LISTA_PARAMETROS":47,"BLOQUE":48,"pr_void":49,"pr_if":50,"IF_INSTRUCCIONES":51,"pr_else":52,"pr_switch":53,"llabre":54,"LISTACASE":55,"llcierra":56,"CASEBLOQUE":57,"pr_case":58,"dospts":59,"pr_default":60,"pr_print":61,"EXP_PRINT":62,"pr_println":63,"pr_while":64,"pr_do":65,"pr_int":66,"pr_double":67,"pr_boolean":68,"pr_char":69,"pr_string":70,"masmas":71,"menosmenos":72,"mas":73,"menos":74,"por":75,"div":76,"pot":77,"modulo":78,"entero":79,"decimal":80,"caracter":81,"cadena":82,"pr_true":83,"pr_false":84,"igualigual":85,"diferente":86,"menorque":87,"mayorque":88,"menorigual":89,"mayorigual":90,"and":91,"or":92,"xor":93,"not":94,"pr_typeof":95,"pr_length":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",22:"pr_break",23:"pr_continue",27:"identificador",28:"cabre",30:"ccierra",31:"igual",33:"pr_new",35:"coma",36:"pr_for",37:"pabre",41:"pcierra",42:"pr_return",43:"pr_call",45:"pr_const",49:"pr_void",50:"pr_if",52:"pr_else",53:"pr_switch",54:"llabre",56:"llcierra",58:"pr_case",59:"dospts",60:"pr_default",61:"pr_print",63:"pr_println",64:"pr_while",65:"pr_do",66:"pr_int",67:"pr_double",68:"pr_boolean",69:"pr_char",70:"pr_string",71:"masmas",72:"menosmenos",73:"mas",74:"menos",75:"por",76:"div",77:"pot",78:"modulo",79:"entero",80:"decimal",81:"caracter",82:"cadena",83:"pr_true",84:"pr_false",85:"igualigual",86:"diferente",87:"menorque",88:"mayorque",89:"menorigual",90:"mayorigual",91:"and",92:"or",93:"xor",94:"not",95:"pr_typeof",96:"pr_length"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[26,6],[26,9],[25,10],[25,8],[25,15],[25,16],[34,3],[34,1],[14,7],[38,1],[38,1],[39,2],[40,2],[40,2],[40,2],[24,2],[24,1],[21,5],[44,3],[44,1],[44,0],[7,5],[7,4],[12,6],[46,3],[46,1],[9,3],[20,6],[47,4],[47,2],[47,0],[10,5],[10,7],[10,7],[51,2],[51,2],[51,2],[51,2],[51,2],[51,1],[51,2],[51,2],[51,2],[51,2],[51,2],[11,7],[55,2],[55,1],[57,4],[57,3],[16,4],[16,4],[62,1],[62,0],[13,5],[15,6],[32,1],[32,1],[32,1],[32,1],[32,1],[19,3],[19,2],[48,3],[48,2],[17,2],[17,2],[18,2],[18,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,3],[29,4],[29,4],[29,4],[29,4],[29,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];        
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 11: case 13: case 14: case 17: case 20: case 21: case 22: case 58: case 59: case 61: case 62: case 64: case 67:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 9: case 10: case 15: case 16: case 63:
 this.$=$$[$0]; 
break;
case 18: case 65:
 this.$= new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 19: case 66:
 this.$= new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23: case 68:
 
        const singleton = Singleton.getInstance();
        var errors = new Issue("Sintactico", "Error sintactico, verificar entrada", this._$.first_line, this._$.first_column + 1); 
        singleton.add_errores(errors); 
break;
case 24:
this.$ = new Asignacion_array($$[$0-5], $$[$0-3], null, $$[$0], 1, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 25:
this.$ = new Asignacion_array($$[$0-8], $$[$0-6], $$[$0-3], $$[$0], 2, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 26:
this.$ = new Declaracion_array($$[$0-9], $$[$0-3], $$[$0-8], 1, $$[$0-1], null, _$[$0-9].first_line, _$[$0-9].first_column)
break;
case 27:
this.$ = new Declaracion_array($$[$0-7], null, $$[$0-6], 1, $$[$0-1], null, _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 28:
this.$ = new Declaracion_array($$[$0-14], $$[$0-6], $$[$0-13], 2, $$[$0-4], $$[$0-1], _$[$0-14].first_line, _$[$0-14].first_column)
break;
case 29:
this.$ = new Declaracion_array($$[$0-15], null, $$[$0-14], 2, $$[$0-6], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column)
break;
case 30:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 31:
 this.$ = [$$[$0]]; 
break;
case 32:
this.$ = new For($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 33: case 34: case 35: case 36: case 37: case 38: case 76: case 117: case 118:
this.$ = $$[$0]
break;
case 39:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 40:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 41:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column )
break;
case 42: case 48:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 43: case 49: case 71:
this.$ = [$$[$0]]
break;
case 44: case 54:
this.$ = []
break;
case 45:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 46:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 47:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 50:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
this.$= new Metodo(null, $$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 52:
$$[$0-3].push({'tipo': $$[$0-1], 'id': $$[$0]}); this.$ = $$[$0-3]
break;
case 53:
this.$ = [{'tipo': $$[$0-1], 'id': $$[$0]}]
break;
case 55:
this.$ = new If($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 56: case 57:
 this.$ = new If($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 69:
this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 70:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]
break;
case 72:
this.$ = new CaseSwitch("case", $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 73:
this.$ = new CaseSwitch("default", null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 74:
this.$ = new Print(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 75:
this.$ = new Print(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 78:
this.$ = new While($$[$0-2], $$[$0]);
break;
case 79:
this.$ = new DoWhile($$[$0-1], $$[$0-4]);
break;
case 80:
this.$=Type.INT;
break;
case 81:
this.$=Type.DOUBLE;
break;
case 82:
this.$=Type.BOOLEAN;
break;
case 83:
this.$=Type.CHAR;
break;
case 84:
this.$=Type.STRING;
break;
case 85: case 87:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 86: case 88:
 this.$= new Bloque(null,_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 89:
this.$ = new Incremento($$[$0], IncrementOption.MASMAS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 90:
this.$ = new Incremento($$[$0-1], IncrementOption.MASMAS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 91:
this.$ = new Decremento($$[$0], DecrementOption.MENOSMENOS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 92:
this.$ = new Decremento($$[$0-1], DecrementOption.MENOSMENOS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 93:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$= new Arithmetic($$[$0],null,ArithmeticOption.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 100:
this.$=new Literal($$[$0],Type.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 101:
this.$=new Literal($$[$0],Type.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 102:
this.$=new Literal($$[$0],Type.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 103:
this.$=new Literal($$[$0],Type.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 104: case 105:
this.$=new Literal($$[$0],Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 106:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 107:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 111:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 113:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 114:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 115:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:
this.$ = new Logical($$[$0], null, LogicalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 119:
this.$ = $$[$0-1]
break;
case 120:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 121:
 this.$= new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 122:
 this.$= new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 123:
 this.$= new ArrayRetorno($$[$0-3], $$[$0-1], null, 1, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 124:
 this.$= new ArrayRetorno($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($Vn,[2,3]),{8:[1,47]},{8:[1,48]},o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},o($Vn,[2,15]),o($Vn,[2,16]),{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{32:60,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk},{27:[1,62],46:61},{28:[1,66],31:$Vo,71:$Vp,72:$Vq},{37:[1,67]},{37:[1,68]},{37:[1,69]},{37:[1,70]},{19:71,54:$Vb},{37:[1,72]},{37:[1,73]},{27:[1,74]},{27:[1,75]},{2:$V0,4:76,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,56:[1,77],61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{27:[1,78]},{27:[1,79]},{8:[2,40],17:90,18:91,27:$Vr,29:80,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VD,[2,83]),o($VD,[2,84]),{1:[2,1]},o($Vn,[2,2]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),{27:$VE,46:95},{31:[1,97],35:$VF},o($VG,$VH,{28:[1,100],37:[1,99]}),{17:90,18:91,27:$Vr,29:101,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,90]),o($VI,[2,92]),{17:90,18:91,27:$Vr,29:102,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:103,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:104,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:105,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{7:107,9:108,27:[1,110],32:109,38:106,45:$V7,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk},{64:[1,111]},{17:90,18:91,27:$Vr,29:113,37:$Vs,41:$VJ,62:112,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:113,37:$Vs,41:$VJ,62:114,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,89]),o($VI,[2,91]),{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,56:[1,115],61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VK,[2,86]),{37:[1,116]},{37:[1,117]},{8:[2,39],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{17:90,18:91,27:$Vr,29:133,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,100]),o($VI,[2,101]),o($VI,[2,102]),o($VI,[2,103]),o($VI,[2,104]),o($VI,[2,105]),o($VI,[2,106],{28:[1,135],37:[1,134],71:$Vp,72:$Vq}),{17:90,18:91,27:$Vr,29:136,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,117]),o($VI,[2,118]),{17:90,18:91,27:$Vr,29:137,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{37:[1,138]},{37:[1,139]},{31:[1,140],35:$VF},o($VG,$VH),{17:90,18:91,27:$Vr,29:141,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{27:[1,142]},o($V_,$V$,{47:143,32:144,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk}),{30:[1,145]},o([8,41],[2,50],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ}),{30:[1,146],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{41:[1,147],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{41:[1,148],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{41:[1,149],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{8:[1,151],39:150},{8:[2,33]},{8:[2,34]},{27:$VE,46:61},{31:$Vo},{37:[1,152]},{41:[1,153]},{41:[2,76],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{41:[1,154]},o($VK,[2,85]),o($V_,$V$,{32:144,47:155,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk}),o($V_,$V01,{17:90,18:91,44:156,29:157,27:$Vr,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC}),{17:90,18:91,27:$Vr,29:158,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:159,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:160,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:161,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:162,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:163,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:164,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:165,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:166,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:167,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:168,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:169,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:170,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:171,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:172,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,99]),o($V_,$V01,{17:90,18:91,29:157,44:173,27:$Vr,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC}),{17:90,18:91,27:$Vr,29:174,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,116]),{41:[1,175],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{17:90,18:91,27:$Vr,29:176,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:177,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:178,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,46],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},o($VG,[2,48]),{35:$V11,41:[1,179]},{27:[1,181]},{28:[1,183],31:[1,182]},{28:[1,185],31:[1,184]},{2:$V21,7:187,9:188,16:189,17:190,18:191,19:192,21:193,22:$V31,23:$V41,24:196,27:$V51,32:109,42:$V5,43:$V6,45:$V7,51:186,54:$Vb,61:$Vc,63:$Vd,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{54:[1,199]},{19:200,54:$Vb},{8:[1,202],40:201},{17:90,18:91,27:$Vr,29:203,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:204,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,74]},{8:[2,75]},{35:$V11,41:[1,205]},{35:$V61,41:[1,206]},o($V_,[2,43],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ}),o($V71,[2,93],{75:$VN,76:$VO,77:$VP,78:$VQ}),o($V71,[2,94],{75:$VN,76:$VO,77:$VP,78:$VQ}),o($V81,[2,95],{77:$VP}),o($V81,[2,96],{77:$VP}),o($VI,[2,97]),o($V81,[2,98],{77:$VP}),o($V91,[2,107],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),o($V91,[2,108],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),o($V91,[2,109],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),o($V91,[2,110],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),o($V91,[2,111],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),o($V91,[2,112],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),o([8,30,35,41,59,91,92],[2,113],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,93:$VZ}),o([8,30,35,41,59,92],[2,114],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,93:$VZ}),o([8,30,35,41,59,91,92,93],[2,115],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW}),{35:$V61,41:[1,208]},{30:[1,209],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},o($VI,[2,119]),{41:[1,210],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{41:[1,211],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{8:[2,45],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{48:212,54:$Va1},{32:214,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk},o($V_,[2,53]),{28:[1,216],33:[1,215]},{30:[1,217]},{17:90,18:91,27:$Vr,29:218,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:219,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($Vn,[2,55],{52:[1,220]}),{8:[1,221]},{8:[1,222]},{8:[1,223]},{8:[1,224]},{8:[1,225]},o($VK,[2,63]),{8:[1,226]},{8:[1,227]},{8:[1,228]},{8:[1,229]},{8:[1,230]},{31:$Vo,71:$Vp,72:$Vq},{55:231,57:232,58:$Vb1,60:$Vc1},o($Vn,[2,78]),{41:[1,235]},{9:238,17:236,18:237,27:$V51,71:$Vl,72:$Vm},{8:[2,35],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{41:[1,239],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{48:240,54:$Va1},{8:[2,41]},{17:90,18:91,27:$Vr,29:241,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},o($VI,[2,120]),o($VI,[2,123],{28:[1,242]}),o($VI,[2,121]),o($VI,[2,122]),o($Vn,[2,47]),{2:$V0,4:243,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,56:[1,244],61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{27:[1,245]},{32:246,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk},{17:90,18:91,27:$Vr,29:248,34:247,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{31:[1,249]},{8:[2,24],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{30:[1,250],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{2:$V21,7:187,9:188,10:252,16:189,17:190,18:191,19:192,21:193,22:$V31,23:$V41,24:196,27:$V51,32:109,42:$V5,43:$V6,45:$V7,50:$V9,51:251,54:$Vb,61:$Vc,63:$Vd,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),o($VK,[2,68]),{56:[1,253],57:254,58:$Vb1,60:$Vc1},o($Vd1,[2,71]),{17:90,18:91,27:$Vr,29:255,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{59:[1,256]},{19:257,54:$Vb},{41:[2,36]},{41:[2,37]},{41:[2,38]},{8:[2,79]},o($Vn,[2,51]),o($V_,[2,42],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ}),{17:90,18:91,27:$Vr,29:258,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,56:[1,259],61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($Vn,[2,88]),o($V_,[2,52]),{28:[1,260]},{30:[1,261],35:$Ve1},o($Vf1,[2,31],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ}),{28:[1,264],33:[1,263]},{31:[1,265]},o($Vn,[2,56]),o($Vn,[2,57]),o($Vn,[2,69]),o($Vd1,[2,70]),{59:[1,266],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{2:$V0,4:267,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($Vn,[2,32]),{30:[1,268],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},o($Vn,[2,87]),{17:90,18:91,27:$Vr,29:269,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,27]},{17:90,18:91,27:$Vr,29:270,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{32:271,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk},{28:[1,272]},{17:90,18:91,27:$Vr,29:273,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{2:$V0,4:274,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:$V2,24:20,25:21,26:22,27:$V3,32:25,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($Vd1,[2,73],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:20,25:21,26:22,32:25,6:46,2:$V0,22:$V1,23:$V2,27:$V3,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm}),o($VI,[2,124]),{30:[1,275],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},o($Vf1,[2,30],{73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ}),{28:[1,276]},{17:90,18:91,27:$Vr,29:248,34:277,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,25],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},o($Vd1,[2,72],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:20,25:21,26:22,32:25,6:46,2:$V0,22:$V1,23:$V2,27:$V3,36:$V4,42:$V5,43:$V6,45:$V7,49:$V8,50:$V9,53:$Va,54:$Vb,61:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm}),{8:[2,26]},{17:90,18:91,27:$Vr,29:278,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{30:[1,279],35:$Ve1},{30:[1,280],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{35:[1,281]},{28:[1,282]},{28:[1,283]},{17:90,18:91,27:$Vr,29:284,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{17:90,18:91,27:$Vr,29:248,34:285,37:$Vs,71:$Vl,72:$Vm,74:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,94:$VA,95:$VB,96:$VC},{30:[1,286],73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,90:$VW,91:$VX,92:$VY,93:$VZ},{30:[1,287],35:$Ve1},{8:[2,28]},{30:[1,288]},{8:[2,29]}],
defaultActions: {45:[2,1],107:[2,33],108:[2,34],153:[2,74],154:[2,75],206:[2,41],236:[2,36],237:[2,37],238:[2,38],239:[2,79],261:[2,27],275:[2,26],286:[2,28],288:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignacion} = require('../instrucciones/asignar');
    const {If} = require('../instrucciones/if');
    const {Print} = require('../instrucciones/print');
    const {Switch} = require('../instrucciones/switch');
    const {Bloque} = require('../instrucciones/bloque')
    const {BloqueBreak} = require('../instrucciones/bloquebreak')
    const {While} = require('../instrucciones/while')
    const {For} = require('../instrucciones/for')
    const {DoWhile} = require('../instrucciones/dowhile')
    const {Metodo} = require('../instrucciones/metodo')
    const {Funcion} = require('../instrucciones/funcion')
    const {CaseSwitch} = require('../instrucciones/caseswitch')
    const {Break} = require('../instrucciones/break')
    const {Continue} = require('../instrucciones/continue')
    const {Return} = require('../instrucciones/return')
    const {Llamada} = require('../instrucciones/llamada')
    const {Declaracion_array} = require('../instrucciones/array_declaracion')
    const {Asignacion_array} = require('../instrucciones/array_asignacion')

    const {Type} = require('../symbols/type');

    const {Literal} = require('../expresiones/literal')
    const {ArrayRetorno} = require('../expresiones/arrayRetorno')
    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');
    const {Identificador} = require('../expresiones/identificador');
    const {Typeof} = require('../expresiones/typeof')
    const {Length} = require('../expresiones/length')
    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');
    const {Logical} = require('../expresiones/logical');
    const {LogicalOption} = require('../expresiones/logicalOptions');
    const {Incremento} = require('../expresiones/incremento');
    const {IncrementOption} = require('../expresiones/incrementOptions');
    const {Decremento} = require('../expresiones/decremento');
    const {DecrementOption} = require('../expresiones/decrementOptions');


    const {Issue} = require('../error/issue');
    const {Singleton} = require('../patron_singleton/singleton');
    var array_erroresLexicos;
    var tipoDeclaracion;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 66;
break;
case 4:return 67;
break;
case 5:return 69;
break;
case 6:return 68;
break;
case 7:return 70;
break;
case 8:return 61;
break;
case 9:return 63;
break;
case 10:return 45;
break;
case 11:return 50;
break;
case 12:return 52;
break;
case 13:return 83;
break;
case 14:return 84;
break;
case 15:return 65;
break;
case 16:return 64;
break;
case 17:return 53
break;
case 18:return 58
break;
case 19:return 60
break;
case 20:return 22
break;
case 21:return 23
break;
case 22:return 49
break;
case 23:return 43
break;
case 24:return 42
break;
case 25:return 95
break;
case 26:return 96
break;
case 27:return 36
break;
case 28:return 33
break;
case 29:return 35;
break;
case 30:return 8;
break;
case 31:return 59;
break;
case 32:return 54;
break;
case 33:return 56;
break;
case 34:return 37;
break;
case 35:return 41;
break;
case 36:return 28;
break;
case 37:return 30;
break;
case 38:return 77;
break;
case 39:return 78;
break;
case 40:return 71;
break;
case 41:return 73;
break;
case 42:return 72;
break;
case 43:return 74;
break;
case 44:return 75;
break;
case 45:return 76;
break;
case 46:return 91;
break;
case 47:return 92;
break;
case 48:return 93;
break;
case 49:return 89;
break;
case 50:return 87;
break;
case 51:return 90;
break;
case 52:return 88;
break;
case 53:return 85;
break;
case 54:return 31;
break;
case 55:return 86;
break;
case 56:return 94;
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 82; 
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 59:return 80;
break;
case 60:return 79;
break;
case 61:return 27;
break;
case 62:return 5;
break;
case 63: 
                        // console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        const singleton = Singleton.getInstance();
                        const error = new Issue("Lexico", "Caracter que lo proboco: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1); 
                        singleton.add_errores(error);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:typeof\b)/i,/^(?:length\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9'_']*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}