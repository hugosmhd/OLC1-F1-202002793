/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,21],$V2=[1,22],$V3=[1,46],$V4=[1,45],$V5=[1,31],$V6=[1,35],$V7=[1,44],$V8=[1,43],$V9=[1,29],$Va=[1,42],$Vb=[1,32],$Vc=[1,33],$Vd=[1,41],$Ve=[1,37],$Vf=[1,38],$Vg=[1,34],$Vh=[1,36],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,39],$Vo=[1,40],$Vp=[2,5,25,26,32,33,39,47,51,52,54,58,59,62,63,65,67,68,69,71,72,73,74,75,76,77,78,79,84],$Vq=[1,75],$Vr=[1,76],$Vs=[1,78],$Vt=[1,106],$Vu=[1,101],$Vv=[1,94],$Vw=[1,95],$Vx=[1,96],$Vy=[1,97],$Vz=[1,98],$VA=[1,99],$VB=[1,100],$VC=[1,102],$VD=[1,107],$VE=[1,108],$VF=[1,109],$VG=[1,110],$VH=[1,111],$VI=[1,112],$VJ=[39,40],$VK=[1,117],$VL=[1,119],$VM=[42,46],$VN=[2,59],$VO=[8,34,38,41,46,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105],$VP=[1,123],$VQ=[2,87],$VR=[2,5,25,26,32,33,39,47,51,52,54,58,59,61,62,63,65,67,68,69,71,72,73,74,75,76,77,78,79,84],$VS=[1,142],$VT=[1,143],$VU=[1,144],$VV=[1,145],$VW=[1,146],$VX=[1,147],$VY=[1,148],$VZ=[1,149],$V_=[1,150],$V$=[1,151],$V01=[1,152],$V11=[1,153],$V21=[1,154],$V31=[1,155],$V41=[1,156],$V51=[34,46],$V61=[2,64],$V71=[2,54],$V81=[1,220],$V91=[1,240],$Va1=[1,237],$Vb1=[1,238],$Vc1=[1,241],$Vd1=[8,38],$Ve1=[1,250],$Vf1=[8,34,38,41,46,85,86,97,98,99,100,101,102,103,104,105],$Vg1=[8,34,38,41,46,85,86,87,88,90,97,98,99,100,101,102,103,104,105],$Vh1=[8,34,38,41,46,97,98,99,100,101,102,103,104,105],$Vi1=[1,268],$Vj1=[1,272],$Vk1=[1,271],$Vl1=[1,273],$Vm1=[1,292],$Vn1=[1,293],$Vo1=[65,67,68],$Vp1=[1,332],$Vq1=[41,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptcoma":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"FUNCIONES":12,"WHILE":13,"FOR":14,"DOWHILE":15,"PRINT":16,"INCREMENT":17,"PUSH":18,"POP":19,"SPLICE":20,"DECREMENT":21,"BLOQUEINSTRUCCIONES":22,"METODOS":23,"LLAMADA_METODO":24,"pr_break":25,"pr_continue":26,"RETURN":27,"DECLARACIONARRAY":28,"ARRAYEXPRES":29,"TERNARIO_INST":30,"GRAFICAR_TS":31,"pr_graficar_ts":32,"pabre":33,"pcierra":34,"EXPRESION":35,"icierra":36,"TERNARIO_OP":37,"dospts":38,"identificador":39,"cabre":40,"ccierra":41,"igual":42,"TIPODATO":43,"EXPRESIONES_ARRAY":44,"ARRAY_VALORES":45,"coma":46,"pr_for":47,"INICIALIZACION":48,"CONDICION":49,"ACTUALIZACION":50,"pr_return":51,"pr_call":52,"LISTA_PASO_PARAMETROS":53,"pr_const":54,"IDS":55,"LISTA_PARAMETROS":56,"BLOQUE":57,"pr_void":58,"pr_if":59,"IF_INSTRUCCIONES":60,"pr_else":61,"pr_switch":62,"llabre":63,"LISTACASE":64,"llcierra":65,"CASEBLOQUE":66,"pr_case":67,"pr_default":68,"pr_print":69,"EXP_PRINT":70,"pr_println":71,"pr_while":72,"pr_do":73,"pr_int":74,"pr_double":75,"pr_boolean":76,"pr_char":77,"pr_string":78,"masmas":79,"punto":80,"pr_push":81,"pr_pop":82,"pr_splice":83,"menosmenos":84,"mas":85,"menos":86,"por":87,"div":88,"pot":89,"modulo":90,"entero":91,"decimal":92,"caracter":93,"cadena":94,"pr_true":95,"pr_false":96,"igualigual":97,"diferente":98,"menorque":99,"mayorque":100,"menorigual":101,"mayorigual":102,"and":103,"or":104,"xor":105,"not":106,"pr_typeof":107,"pr_length":108,"pr_round":109,"pr_toLower":110,"pr_toUpper":111,"pr_indexOf":112,"pr_new":113,"TERNARIO_EXP":114,"pr_toCharArray":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",25:"pr_break",26:"pr_continue",32:"pr_graficar_ts",33:"pabre",34:"pcierra",36:"icierra",38:"dospts",39:"identificador",40:"cabre",41:"ccierra",42:"igual",46:"coma",47:"pr_for",51:"pr_return",52:"pr_call",54:"pr_const",58:"pr_void",59:"pr_if",61:"pr_else",62:"pr_switch",63:"llabre",65:"llcierra",67:"pr_case",68:"pr_default",69:"pr_print",71:"pr_println",72:"pr_while",73:"pr_do",74:"pr_int",75:"pr_double",76:"pr_boolean",77:"pr_char",78:"pr_string",79:"masmas",80:"punto",81:"pr_push",82:"pr_pop",83:"pr_splice",84:"menosmenos",85:"mas",86:"menos",87:"por",88:"div",89:"pot",90:"modulo",91:"entero",92:"decimal",93:"caracter",94:"cadena",95:"pr_true",96:"pr_false",97:"igualigual",98:"diferente",99:"menorque",100:"mayorque",101:"menorigual",102:"mayorigual",103:"and",104:"or",105:"xor",106:"not",107:"pr_typeof",108:"pr_length",109:"pr_round",110:"pr_toLower",111:"pr_toUpper",112:"pr_indexOf",113:"pr_new",115:"pr_toCharArray"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[31,3],[30,7],[37,1],[37,1],[37,1],[37,1],[37,1],[29,6],[29,9],[28,6],[28,8],[45,3],[45,1],[14,7],[48,1],[48,1],[49,2],[50,2],[50,2],[50,2],[27,2],[27,1],[24,5],[53,3],[53,1],[53,0],[7,5],[7,4],[12,6],[55,3],[55,1],[9,3],[23,6],[56,4],[56,2],[56,0],[10,5],[10,7],[10,7],[60,2],[60,2],[60,2],[60,2],[60,2],[60,1],[60,2],[60,2],[60,2],[60,2],[60,2],[11,7],[64,2],[64,1],[66,4],[66,3],[16,4],[16,4],[70,1],[70,0],[13,5],[15,6],[43,1],[43,1],[43,1],[43,1],[43,1],[22,3],[22,2],[57,3],[57,2],[17,2],[17,2],[18,6],[19,5],[20,8],[21,2],[21,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[35,1],[35,1],[35,3],[35,4],[35,4],[35,4],[35,4],[35,4],[35,4],[35,6],[35,8],[35,4],[35,7],[35,1],[44,8],[44,5],[44,3],[44,9],[44,4],[114,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];        
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 11: case 13: case 14: case 15: case 16: case 17: case 20: case 23: case 24: case 25: case 26: case 27: case 68: case 69: case 71: case 72: case 74: case 77:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 9: case 10: case 18: case 19: case 73:
 this.$=$$[$0]; 
break;
case 21: case 75:
 this.$= new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 22: case 76:
 this.$= new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 28: case 78:
 
        const singleton = Singleton.getInstance();
        var errors = new Issue("Sintactico", "Error sintactico, verificar entrada", this._$.first_line, this._$.first_column + 1); 
        singleton.add_errores(errors); 
break;
case 29:
 this.$= new GraficarTS(_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30: case 150:
 this.$ = new Ternario($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 31: case 32: case 33: case 34: case 35: case 144:
 this.$ = $$[$0] 
break;
case 36:
this.$ = new Asignacion_array($$[$0-5], $$[$0-3], null, $$[$0], 1, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 37:
this.$ = new Asignacion_array($$[$0-8], $$[$0-6], $$[$0-3], $$[$0], 2, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 38:
this.$ = new Declaracion_array($$[$0-5], null, $$[$0-4], 1, $$[$0], null, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 39:
this.$ = new Declaracion_array($$[$0-7], null, $$[$0-6], 2, $$[$0], null, _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 40:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 41:
 this.$ = [$$[$0]]; 
break;
case 42:
this.$ = new For($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 43: case 44: case 45: case 46: case 47: case 48: case 86: case 130: case 131: case 132:
this.$ = $$[$0]
break;
case 49:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 51:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column )
break;
case 52: case 58:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 53: case 59: case 81:
this.$ = [$$[$0]]
break;
case 54: case 64:
this.$ = []
break;
case 55:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 56:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 57:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 60:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 61:
this.$= new Metodo(null, $$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 62:
$$[$0-3].push({'tipo': $$[$0-1], 'id': $$[$0]}); this.$ = $$[$0-3]
break;
case 63:
this.$ = [{'tipo': $$[$0-1], 'id': $$[$0]}]
break;
case 65:
this.$ = new If($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 66: case 67:
 this.$ = new If($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 79:
this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 80:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]
break;
case 82:
this.$ = new CaseSwitch("case", $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 83:
this.$ = new CaseSwitch("default", null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 84:
this.$ = new Print(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 85:
this.$ = new Print(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 88:
this.$ = new While($$[$0-2], $$[$0]);
break;
case 89:
this.$ = new DoWhile($$[$0-1], $$[$0-4]);
break;
case 90:
this.$=Type.INT;
break;
case 91:
this.$=Type.DOUBLE;
break;
case 92:
this.$=Type.BOOLEAN;
break;
case 93:
this.$=Type.CHAR;
break;
case 94:
this.$=Type.STRING;
break;
case 95: case 97:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 96: case 98:
 this.$= new Bloque(null,_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 99:
this.$ = new Incremento($$[$0], IncrementOption.MASMAS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 100:
this.$ = new Incremento($$[$0-1], IncrementOption.MASMAS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 101:
 this.$ = new Push($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 102:
 this.$ = new Pop($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 103:
 this.$ = new Splice($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 104:
this.$ = new Decremento($$[$0], DecrementOption.MENOSMENOS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 105:
this.$ = new Decremento($$[$0-1], DecrementOption.MENOSMENOS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 106:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 111:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$= new Arithmetic($$[$0],null,ArithmeticOption.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 113:
this.$=new Literal($$[$0],Type.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 114:
this.$=new Literal($$[$0],Type.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 115:
this.$=new Literal($$[$0],Type.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 116:
this.$=new Literal($$[$0],Type.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 117: case 118:
this.$=new Literal($$[$0],Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 119:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 120:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 121:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 122:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 123:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 124:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 125:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 126:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 128:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 129:
this.$ = new Logical($$[$0], null, LogicalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 133:
this.$ = $$[$0-1]
break;
case 134:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 135:
 this.$= new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 136:
 this.$= new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 137:
 this.$= new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 138:
 this.$= new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 139:
 this.$= new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 140:
 this.$= new IndexOf($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 141: case 145:
 this.$ = new ArrayValues($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 142:
 this.$= new ArrayRetorno($$[$0-3], $$[$0-1], null, 1, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 143:
 this.$= new ArrayRetorno($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 146:
 this.$ = new ArrayValues($$[$0-3], $$[$0-1], null, 1, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 147:
 this.$ = new ArrayValues(null, $$[$0-1], null, 1, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 148:
 this.$ = new ArrayValues(null, $$[$0-6], $$[$0-2], 2, _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 149:
 this.$= new ToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},{1:[3]},{2:$V0,5:[1,52],6:53,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},o($Vp,[2,3]),{8:[1,54]},{8:[1,55]},o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},o($Vp,[2,18]),o($Vp,[2,19]),{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{8:[1,68]},{8:[1,69]},{8:[1,70]},{8:[1,71]},{43:72,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{39:[1,74],55:73},{40:[1,79],42:$Vq,79:$Vr,80:[1,77],84:$Vs},{33:[1,80]},{33:[1,81]},{33:[1,82]},{33:[1,83]},{22:84,63:$Vd},{33:[1,85]},{33:[1,86]},{39:[1,87]},{39:[1,88]},{2:$V0,4:89,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,65:[1,90],69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},{39:[1,91]},{39:[1,92]},{8:[2,50],17:103,18:104,21:105,33:$Vt,35:93,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:114,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{33:[1,115]},o($VJ,[2,90]),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93]),o($VJ,[2,94]),{1:[2,1]},o($Vp,[2,2]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),{39:$VK,55:116},{42:[1,118],46:$VL},o($VM,$VN,{33:[1,120],40:[1,121]}),{17:103,18:104,21:105,33:$Vt,35:122,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,100]),{81:$VP,82:[1,124],83:[1,125]},o($VO,[2,105]),{17:103,18:104,21:105,33:$Vt,35:126,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:127,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:128,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:129,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{7:131,9:132,39:[1,134],43:133,48:130,54:$V9,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{72:[1,135]},{17:103,18:104,21:105,33:$Vt,34:$VQ,35:137,39:$Vu,70:136,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,34:$VQ,35:137,39:$Vu,70:138,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,99]),o($VO,[2,104]),{2:$V0,6:53,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,65:[1,139],69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},o($VR,[2,96]),{33:[1,140]},{33:[1,141]},{8:[2,49],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{17:103,18:104,21:105,33:$Vt,35:157,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,113]),o($VO,[2,114]),o($VO,[2,115]),o($VO,[2,116]),o($VO,[2,117]),o($VO,[2,118]),o($VO,[2,119],{33:[1,158],40:[1,160],79:$Vr,80:[1,159],84:$Vs}),{17:103,18:104,21:105,33:$Vt,35:161,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,130]),o($VO,[2,131]),o($VO,[2,132]),{17:103,18:104,21:105,33:$Vt,35:162,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{33:[1,163]},{33:[1,164]},{33:[1,165]},{33:[1,166]},{33:[1,167]},{43:168,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($VO,[2,144]),{34:[1,169],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,170]},{42:[1,171],46:$VL},o($VM,$VN),{17:103,18:104,21:105,33:$Vt,35:172,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{39:[1,173]},o($V51,$V61,{56:174,43:175,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm}),{41:[1,176]},o([8,34,38],[2,60],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41}),{33:[1,177]},{33:[1,178]},{33:[1,179]},{41:[1,180],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,181],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,182],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,183],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{8:[1,185],49:184},{8:[2,43]},{8:[2,44]},{39:$VK,55:73},{42:$Vq},{33:[1,186]},{34:[1,187]},{34:[2,86],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,188]},o($VR,[2,95]),o($V51,$V61,{43:175,56:189,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm}),o($V51,$V71,{17:103,18:104,21:105,114:113,53:190,35:191,33:$Vt,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{17:103,18:104,21:105,33:$Vt,35:192,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:193,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:194,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:195,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:196,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:197,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:198,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:199,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:200,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:201,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:202,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:203,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:204,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:205,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:206,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,112]),o($V51,$V71,{17:103,18:104,21:105,114:113,35:191,53:207,33:$Vt,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI}),{81:$VP,112:[1,208]},{17:103,18:104,21:105,33:$Vt,35:209,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,129]),{34:[1,210],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{17:103,18:104,21:105,33:$Vt,35:211,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:212,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:213,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:214,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:215,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{40:[1,216]},{36:[1,217]},{8:[2,29]},{17:103,18:104,21:105,33:$Vt,35:218,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{8:[2,56],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},o($VM,[2,58]),{34:[1,219],46:$V81},{39:[1,221]},{40:[1,223],42:[1,222]},{17:103,18:104,21:105,33:$Vt,35:224,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{34:[1,225]},{17:103,18:104,21:105,33:$Vt,35:226,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{40:[1,228],42:[1,227]},{2:$V91,7:230,9:231,16:232,17:233,21:234,22:235,24:236,25:$Va1,26:$Vb1,27:239,39:$Vc1,43:133,51:$V7,52:$V8,54:$V9,60:229,63:$Vd,69:$Ve,71:$Vf,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},{63:[1,242]},{22:243,63:$Vd},{8:[1,245],50:244},{17:103,18:104,21:105,33:$Vt,35:246,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:247,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($Vd1,[2,84]),o($Vd1,[2,85]),{34:[1,248],46:$V81},{34:[1,249],46:$Ve1},o($V51,[2,53],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41}),o($Vf1,[2,106],{87:$VU,88:$VV,89:$VW,90:$VX}),o($Vf1,[2,107],{87:$VU,88:$VV,89:$VW,90:$VX}),o($Vg1,[2,108],{89:$VW}),o($Vg1,[2,109],{89:$VW}),o($VO,[2,110]),o($Vg1,[2,111],{89:$VW}),o($Vh1,[2,120],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o($Vh1,[2,121],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o($Vh1,[2,122],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o($Vh1,[2,123],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o($Vh1,[2,124],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o($Vh1,[2,125],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o([8,34,38,41,46,103,104],[2,126],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,105:$V41}),o([8,34,38,41,46,104],[2,127],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,105:$V41}),o([8,34,38,41,46,103,104,105],[2,128],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11}),{34:[1,251],46:$Ve1},{33:[1,252]},{41:[1,253],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},o($VO,[2,133],{36:[1,254]}),{34:[1,255],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,256],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,257],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,258],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,259],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{17:103,18:104,21:105,33:$Vt,35:260,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{9:264,16:262,17:265,21:266,24:263,37:261,39:$Vc1,52:$V8,69:$Ve,71:$Vf,79:$Vn,84:$Vo},{8:[2,55],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{57:267,63:$Vi1},{43:269,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($V51,[2,63]),{40:$Vj1,44:270,113:$Vk1,115:$Vl1},{41:[1,274]},{34:[1,275],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{8:[2,102]},{46:[1,276],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{17:103,18:104,21:105,33:$Vt,35:277,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:278,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($Vp,[2,65],{61:[1,279]}),{8:[1,280]},{8:[1,281]},{8:[1,282]},{8:[1,283]},{8:[1,284]},o($VR,[2,73]),{8:[1,285]},{8:[1,286]},{8:[1,287]},{8:[1,288]},{8:[1,289]},{42:$Vq,79:$Vr,84:$Vs},{64:290,66:291,67:$Vm1,68:$Vn1},o($Vp,[2,88]),{34:[1,294]},{9:297,17:295,21:296,39:$Vc1,79:$Vn,84:$Vo},{8:[2,45],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{34:[1,298],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{57:299,63:$Vi1},o($Vd1,[2,51]),{17:103,18:104,21:105,33:$Vt,35:300,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,134]),{17:103,18:104,21:105,33:$Vt,35:301,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,142],{40:[1,302]}),{17:103,18:104,21:105,33:$Vt,35:303,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($VO,[2,135]),o($VO,[2,136]),o($VO,[2,137]),o($VO,[2,138]),o($VO,[2,139]),{41:[1,304],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{38:[1,305]},o($Vd1,[2,31]),o($Vd1,[2,32]),o($Vd1,[2,33]),o($Vd1,[2,34]),o($Vd1,[2,35]),o($Vp,[2,57]),{2:$V0,4:306,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,65:[1,307],69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},{39:[1,308]},{8:[2,38]},{43:309,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{17:103,18:104,21:105,33:$Vt,35:312,39:$Vu,40:[1,311],45:310,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{33:[1,313]},{42:[1,314]},o($VO,[2,101]),{17:103,18:104,21:105,33:$Vt,35:315,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{8:[2,36],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{41:[1,316],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{2:$V91,7:230,9:231,10:318,16:232,17:233,21:234,22:235,24:236,25:$Va1,26:$Vb1,27:239,39:$Vc1,43:133,51:$V7,52:$V8,54:$V9,59:$Vb,60:317,63:$Vd,69:$Ve,71:$Vf,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,77]),o($VR,[2,78]),{65:[1,319],66:320,67:$Vm1,68:$Vn1},o($Vo1,[2,81]),{17:103,18:104,21:105,33:$Vt,35:321,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{38:[1,322]},{22:323,63:$Vd},{34:[2,46]},{34:[2,47]},{34:[2,48]},{8:[2,89]},o($Vp,[2,61]),o($V51,[2,52],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41}),{34:[1,324],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{17:103,18:104,21:105,33:$Vt,35:325,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{38:[1,326],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{40:[1,327]},{9:264,16:262,17:265,21:266,24:263,37:328,39:$Vc1,52:$V8,69:$Ve,71:$Vf,79:$Vn,84:$Vo},{2:$V0,6:53,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,65:[1,329],69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},o($Vp,[2,98]),o($V51,[2,62]),{40:[1,330]},{41:[1,331],46:$Vp1},{17:103,18:104,21:105,33:$Vt,35:312,39:$Vu,45:333,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},o($Vq1,[2,41],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41}),{17:103,18:104,21:105,33:$Vt,35:334,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{40:$Vj1,44:335,113:$Vk1,115:$Vl1},{34:[1,336],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{42:[1,337]},o($Vp,[2,66]),o($Vp,[2,67]),o($Vp,[2,79]),o($Vo1,[2,80]),{38:[1,338],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{2:$V0,4:339,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},o($Vp,[2,42]),o($VO,[2,140]),{41:[1,340],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{17:103,18:104,21:105,33:$Vt,35:341,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:342,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{8:[2,30]},o($Vp,[2,97]),{17:103,18:104,21:105,33:$Vt,35:343,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{8:[2,147]},{17:103,18:104,21:105,33:$Vt,35:344,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{41:[1,345],46:$Vp1},{34:[1,346],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{8:[2,39]},{8:[2,103]},{17:103,18:104,21:105,33:$Vt,35:347,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{2:$V0,4:348,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:26,31:27,32:$V3,33:$V4,39:$V5,43:30,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo},o($Vo1,[2,83],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,27:23,28:24,29:25,30:26,31:27,43:30,6:53,2:$V0,25:$V1,26:$V2,32:$V3,33:$V4,39:$V5,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo}),o($VO,[2,143]),o($VO,[2,150]),{41:[1,349],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{41:[1,350],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},o($Vq1,[2,40],{85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41}),{46:[1,351]},{8:[2,149]},{8:[2,37],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},o($Vo1,[2,82],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,27:23,28:24,29:25,30:26,31:27,43:30,6:53,2:$V0,25:$V1,26:$V2,32:$V3,33:$V4,39:$V5,47:$V6,51:$V7,52:$V8,54:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,69:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,84:$Vo}),o($VO,[2,141]),{8:[2,146],40:[1,352]},{40:[1,353]},{17:103,18:104,21:105,33:$Vt,35:354,39:$Vu,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{17:103,18:104,21:105,33:$Vt,35:312,39:$Vu,45:355,79:$Vn,84:$Vo,86:$Vv,91:$Vw,92:$Vx,93:$Vy,94:$Vz,95:$VA,96:$VB,106:$VC,107:$VD,108:$VE,109:$VF,110:$VG,111:$VH,113:$VI,114:113},{41:[1,356],85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,97:$VY,98:$VZ,99:$V_,100:$V$,101:$V01,102:$V11,103:$V21,104:$V31,105:$V41},{41:[1,357],46:$Vp1},{8:[2,145]},{41:[1,358]},{8:[2,148]}],
defaultActions: {52:[2,1],131:[2,43],132:[2,44],170:[2,29],225:[2,102],270:[2,38],295:[2,46],296:[2,47],297:[2,48],298:[2,89],328:[2,30],331:[2,147],335:[2,39],336:[2,103],346:[2,149],356:[2,145],358:[2,148]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignacion} = require('../instrucciones/asignar');
    const {If} = require('../instrucciones/if');
    const {Print} = require('../instrucciones/print');
    const {Switch} = require('../instrucciones/switch');
    const {Bloque} = require('../instrucciones/bloque')
    const {BloqueBreak} = require('../instrucciones/bloquebreak')
    const {While} = require('../instrucciones/while')
    const {For} = require('../instrucciones/for')
    const {DoWhile} = require('../instrucciones/dowhile')
    const {Metodo} = require('../instrucciones/metodo')
    const {Funcion} = require('../instrucciones/funcion')
    const {CaseSwitch} = require('../instrucciones/caseswitch')
    const {Break} = require('../instrucciones/break')
    const {Continue} = require('../instrucciones/continue')
    const {Return} = require('../instrucciones/return')
    const {Llamada} = require('../instrucciones/llamada')
    const {Declaracion_array} = require('../instrucciones/array_declaracion')
    const {Asignacion_array} = require('../instrucciones/array_asignacion')
    const {Pop} = require('../instrucciones/pop')
    const {Splice} = require('../instrucciones/splice')
    const {GraficarTS} = require('../instrucciones/graficarTS')

    const {Type} = require('../symbols/type');

    const {Literal} = require('../expresiones/literal')
    const {Ternario} = require('../expresiones/ternario')
    const {ArrayValues} = require('../expresiones/arrayValues')
    const {ArrayRetorno} = require('../expresiones/arrayRetorno')
    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');
    const {Identificador} = require('../expresiones/identificador');
    const {Typeof} = require('../expresiones/typeof')
    const {Round} = require('../expresiones/round')
    const {Length} = require('../expresiones/length')
    const {ToCharArray} = require('../expresiones/toCharArray')
    const {ToLower} = require('../expresiones/toLower')
    const {ToUpper} = require('../expresiones/toUpper')
    const {IndexOf} = require('../expresiones/indexOf')
    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');
    const {Logical} = require('../expresiones/logical');
    const {LogicalOption} = require('../expresiones/logicalOptions');
    const {Incremento} = require('../expresiones/incremento');
    const {Push} = require('../expresiones/push');
    const {IncrementOption} = require('../expresiones/incrementOptions');
    const {Decremento} = require('../expresiones/decremento');
    const {DecrementOption} = require('../expresiones/decrementOptions');


    const {Issue} = require('../error/issue');
    const {Singleton} = require('../patron_singleton/singleton');
    var array_erroresLexicos;
    var tipoDeclaracion;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 74;
break;
case 4:return 75;
break;
case 5:return 77;
break;
case 6:return 76;
break;
case 7:return 78;
break;
case 8:return 69;
break;
case 9:return 71;
break;
case 10:return 54;
break;
case 11:return 59;
break;
case 12:return 61;
break;
case 13:return 95;
break;
case 14:return 96;
break;
case 15:return 73;
break;
case 16:return 72;
break;
case 17:return 62
break;
case 18:return 67
break;
case 19:return 68
break;
case 20:return 25
break;
case 21:return 26
break;
case 22:return 58
break;
case 23:return 52
break;
case 24:return 51
break;
case 25:return 107
break;
case 26:return 108
break;
case 27:return 115
break;
case 28:return 110
break;
case 29:return 111
break;
case 30:return 109
break;
case 31:return 112
break;
case 32:return 47
break;
case 33:return 113
break;
case 34:return 81
break;
case 35:return 82
break;
case 36:return 83
break;
case 37:return 32
break;
case 38:return 46;
break;
case 39:return 80;
break;
case 40:return 8;
break;
case 41:return 38;
break;
case 42:return 63;
break;
case 43:return 65;
break;
case 44:return 33;
break;
case 45:return 34;
break;
case 46:return 40;
break;
case 47:return 41;
break;
case 48:return 36;
break;
case 49:return 89;
break;
case 50:return 90;
break;
case 51:return 79;
break;
case 52:return 85;
break;
case 53:return 84;
break;
case 54:return 86;
break;
case 55:return 87;
break;
case 56:return 88;
break;
case 57:return 103;
break;
case 58:return 104;
break;
case 59:return 105;
break;
case 60:return 101;
break;
case 61:return 99;
break;
case 62:return 102;
break;
case 63:return 100;
break;
case 64:return 97;
break;
case 65:return 42;
break;
case 66:return 98;
break;
case 67:return 106;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 94; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 70:return 92;
break;
case 71:return 91;
break;
case 72:return 39;
break;
case 73:return 5;
break;
case 74: 
                        const singleton = Singleton.getInstance();
                        const error = new Issue("Lexico", "Caracter que lo proboco: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1); 
                        singleton.add_errores(error);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:typeof\b)/i,/^(?:length\b)/i,/^(?:toCharArray\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:indexOf\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:graficar_ts\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9'_']*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}