/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,21],$V2=[1,22],$V3=[1,29],$V4=[1,33],$V5=[1,42],$V6=[1,41],$V7=[1,27],$V8=[1,40],$V9=[1,30],$Va=[1,31],$Vb=[1,39],$Vc=[1,35],$Vd=[1,36],$Ve=[1,32],$Vf=[1,34],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,37],$Vm=[1,38],$Vn=[2,5,25,26,30,39,45,46,48,52,53,56,57,59,61,63,64,66,67,68,69,70,71,72,73,74,79],$Vo=[1,69],$Vp=[1,70],$Vq=[1,72],$Vr=[1,95],$Vs=[1,100],$Vt=[1,88],$Vu=[1,89],$Vv=[1,90],$Vw=[1,91],$Vx=[1,92],$Vy=[1,93],$Vz=[1,94],$VA=[1,96],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[30,31],$VG=[1,106],$VH=[1,108],$VI=[34,38],$VJ=[2,50],$VK=[8,33,38,44,62,80,81,82,83,84,85,92,93,94,95,96,97,98,99,100],$VL=[1,112],$VM=[2,78],$VN=[2,5,25,26,30,39,45,46,48,52,53,55,56,57,59,61,63,64,66,67,68,69,70,71,72,73,74,79],$VO=[1,131],$VP=[1,132],$VQ=[1,133],$VR=[1,134],$VS=[1,135],$VT=[1,136],$VU=[1,137],$VV=[1,138],$VW=[1,139],$VX=[1,140],$VY=[1,141],$VZ=[1,142],$V_=[1,143],$V$=[1,144],$V01=[1,145],$V11=[38,44],$V21=[2,55],$V31=[2,45],$V41=[1,202],$V51=[1,222],$V61=[1,219],$V71=[1,220],$V81=[1,223],$V91=[1,232],$Va1=[8,33,38,44,62,80,81,92,93,94,95,96,97,98,99,100],$Vb1=[8,33,38,44,62,80,81,82,83,85,92,93,94,95,96,97,98,99,100],$Vc1=[8,33,38,44,62,92,93,94,95,96,97,98,99,100],$Vd1=[1,241],$Ve1=[1,245],$Vf1=[1,244],$Vg1=[1,264],$Vh1=[1,265],$Vi1=[59,61,63],$Vj1=[1,299],$Vk1=[33,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptcoma":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"FUNCIONES":12,"WHILE":13,"FOR":14,"DOWHILE":15,"PRINT":16,"INCREMENT":17,"PUSH":18,"POP":19,"SPLICE":20,"DECREMENT":21,"BLOQUEINSTRUCCIONES":22,"METODOS":23,"LLAMADA_METODO":24,"pr_break":25,"pr_continue":26,"RETURN":27,"DECLARACIONARRAY":28,"ARRAYEXPRES":29,"identificador":30,"cabre":31,"EXPRESION":32,"ccierra":33,"igual":34,"TIPODATO":35,"EXPRESIONES_ARRAY":36,"ARRAY_VALORES":37,"coma":38,"pr_for":39,"pabre":40,"INICIALIZACION":41,"CONDICION":42,"ACTUALIZACION":43,"pcierra":44,"pr_return":45,"pr_call":46,"LISTA_PASO_PARAMETROS":47,"pr_const":48,"IDS":49,"LISTA_PARAMETROS":50,"BLOQUE":51,"pr_void":52,"pr_if":53,"IF_INSTRUCCIONES":54,"pr_else":55,"pr_switch":56,"llabre":57,"LISTACASE":58,"llcierra":59,"CASEBLOQUE":60,"pr_case":61,"dospts":62,"pr_default":63,"pr_print":64,"EXP_PRINT":65,"pr_println":66,"pr_while":67,"pr_do":68,"pr_int":69,"pr_double":70,"pr_boolean":71,"pr_char":72,"pr_string":73,"masmas":74,"punto":75,"pr_push":76,"pr_pop":77,"pr_splice":78,"menosmenos":79,"mas":80,"menos":81,"por":82,"div":83,"pot":84,"modulo":85,"entero":86,"decimal":87,"caracter":88,"cadena":89,"pr_true":90,"pr_false":91,"igualigual":92,"diferente":93,"menorque":94,"mayorque":95,"menorigual":96,"mayorigual":97,"and":98,"or":99,"xor":100,"not":101,"pr_typeof":102,"pr_length":103,"pr_toCharArray":104,"pr_indexOf":105,"pr_new":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",25:"pr_break",26:"pr_continue",30:"identificador",31:"cabre",33:"ccierra",34:"igual",38:"coma",39:"pr_for",40:"pabre",44:"pcierra",45:"pr_return",46:"pr_call",48:"pr_const",52:"pr_void",53:"pr_if",55:"pr_else",56:"pr_switch",57:"llabre",59:"llcierra",61:"pr_case",62:"dospts",63:"pr_default",64:"pr_print",66:"pr_println",67:"pr_while",68:"pr_do",69:"pr_int",70:"pr_double",71:"pr_boolean",72:"pr_char",73:"pr_string",74:"masmas",75:"punto",76:"pr_push",77:"pr_pop",78:"pr_splice",79:"menosmenos",80:"mas",81:"menos",82:"por",83:"div",84:"pot",85:"modulo",86:"entero",87:"decimal",88:"caracter",89:"cadena",90:"pr_true",91:"pr_false",92:"igualigual",93:"diferente",94:"menorque",95:"mayorque",96:"menorigual",97:"mayorigual",98:"and",99:"or",100:"xor",101:"not",102:"pr_typeof",103:"pr_length",104:"pr_toCharArray",105:"pr_indexOf",106:"pr_new"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[29,6],[29,9],[28,6],[28,8],[37,3],[37,1],[14,7],[41,1],[41,1],[42,2],[43,2],[43,2],[43,2],[27,2],[27,1],[24,5],[47,3],[47,1],[47,0],[7,5],[7,4],[12,6],[49,3],[49,1],[9,3],[23,6],[50,4],[50,2],[50,0],[10,5],[10,7],[10,7],[54,2],[54,2],[54,2],[54,2],[54,2],[54,1],[54,2],[54,2],[54,2],[54,2],[54,2],[11,7],[58,2],[58,1],[60,4],[60,3],[16,4],[16,4],[65,1],[65,0],[13,5],[15,6],[35,1],[35,1],[35,1],[35,1],[35,1],[22,3],[22,2],[51,3],[51,2],[17,2],[17,2],[18,6],[19,5],[20,8],[21,2],[21,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,3],[32,4],[32,4],[32,4],[32,4],[32,6],[32,8],[32,4],[32,7],[36,8],[36,5],[36,3],[36,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];        
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 11: case 13: case 14: case 15: case 16: case 17: case 20: case 23: case 24: case 25: case 59: case 60: case 62: case 63: case 65: case 68:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 9: case 10: case 18: case 19: case 64:
 this.$=$$[$0]; 
break;
case 21: case 66:
 this.$= new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 22: case 67:
 this.$= new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 26: case 69:
 
        const singleton = Singleton.getInstance();
        var errors = new Issue("Sintactico", "Error sintactico, verificar entrada", this._$.first_line, this._$.first_column + 1); 
        singleton.add_errores(errors); 
break;
case 27:
this.$ = new Asignacion_array($$[$0-5], $$[$0-3], null, $$[$0], 1, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 28:
this.$ = new Asignacion_array($$[$0-8], $$[$0-6], $$[$0-3], $$[$0], 2, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 29:
this.$ = new Declaracion_array($$[$0-5], null, $$[$0-4], 1, $$[$0], null, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 30:
this.$ = new Declaracion_array($$[$0-7], null, $$[$0-6], 2, $$[$0], null, _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 31:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 32:
 this.$ = [$$[$0]]; 
break;
case 33:
this.$ = new For($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 34: case 35: case 36: case 37: case 38: case 39: case 77: case 121: case 122: case 123:
this.$ = $$[$0]
break;
case 40:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 41:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 42:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column )
break;
case 43: case 49:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 44: case 50: case 72:
this.$ = [$$[$0]]
break;
case 45: case 55:
this.$ = []
break;
case 46:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 47:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 48:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 51:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 52:
this.$= new Metodo(null, $$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 53:
$$[$0-3].push({'tipo': $$[$0-1], 'id': $$[$0]}); this.$ = $$[$0-3]
break;
case 54:
this.$ = [{'tipo': $$[$0-1], 'id': $$[$0]}]
break;
case 56:
this.$ = new If($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 57: case 58:
 this.$ = new If($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 70:
this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 71:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]
break;
case 73:
this.$ = new CaseSwitch("case", $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 74:
this.$ = new CaseSwitch("default", null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 75:
this.$ = new Print(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 76:
this.$ = new Print(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 79:
this.$ = new While($$[$0-2], $$[$0]);
break;
case 80:
this.$ = new DoWhile($$[$0-1], $$[$0-4]);
break;
case 81:
this.$=Type.INT;
break;
case 82:
this.$=Type.DOUBLE;
break;
case 83:
this.$=Type.BOOLEAN;
break;
case 84:
this.$=Type.CHAR;
break;
case 85:
this.$=Type.STRING;
break;
case 86: case 88:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 87: case 89:
 this.$= new Bloque(null,_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 90:
this.$ = new Incremento($$[$0], IncrementOption.MASMAS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 91:
this.$ = new Incremento($$[$0-1], IncrementOption.MASMAS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 92:
 this.$ = new Push($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 93:
 this.$ = new Pop($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 94:
 this.$ = new Splice($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 95:
this.$ = new Decremento($$[$0], DecrementOption.MENOSMENOS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
this.$ = new Decremento($$[$0-1], DecrementOption.MENOSMENOS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 97:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$= new Arithmetic($$[$0],null,ArithmeticOption.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
this.$=new Literal($$[$0],Type.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 105:
this.$=new Literal($$[$0],Type.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 106:
this.$=new Literal($$[$0],Type.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 107:
this.$=new Literal($$[$0],Type.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 108: case 109:
this.$=new Literal($$[$0],Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 110:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 111:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 113:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 114:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 115:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 117:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 118:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 120:
this.$ = new Logical($$[$0], null, LogicalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 124:
this.$ = $$[$0-1]
break;
case 125:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 126:
 this.$= new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 127:
 this.$= new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 128:
 this.$= new ToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 129:
 this.$= new IndexOf($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 130: case 133:
 this.$ = new ArrayValues($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 131:
 this.$= new ArrayRetorno($$[$0-3], $$[$0-1], null, 1, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 132:
 this.$= new ArrayRetorno($$[$0-6], $$[$0-4], $$[$0-1], 2, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 134:
 this.$ = new ArrayValues($$[$0-3], $$[$0-1], null, 1, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 135:
 this.$ = new ArrayValues(null, $$[$0-1], null, 1, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 136:
 this.$ = new ArrayValues(null, $$[$0-6], $$[$0-2], 2, _$[$0-8].first_line, _$[$0-8].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},o($Vn,[2,3]),{8:[1,50]},{8:[1,51]},o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},o($Vn,[2,18]),o($Vn,[2,19]),{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{35:66,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk},{30:[1,68],49:67},{31:[1,73],34:$Vo,74:$Vp,75:[1,71],79:$Vq},{40:[1,74]},{40:[1,75]},{40:[1,76]},{40:[1,77]},{22:78,57:$Vb},{40:[1,79]},{40:[1,80]},{30:[1,81]},{30:[1,82]},{2:$V0,4:83,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,59:[1,84],64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},{30:[1,85]},{30:[1,86]},{8:[2,41],17:97,18:98,21:99,30:$Vr,32:87,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VF,[2,81]),o($VF,[2,82]),o($VF,[2,83]),o($VF,[2,84]),o($VF,[2,85]),{1:[2,1]},o($Vn,[2,2]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),{30:$VG,49:105},{34:[1,107],38:$VH},o($VI,$VJ,{31:[1,110],40:[1,109]}),{17:97,18:98,21:99,30:$Vr,32:111,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,91]),{76:$VL,77:[1,113],78:[1,114]},o($VK,[2,96]),{17:97,18:98,21:99,30:$Vr,32:115,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:116,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:117,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:118,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{7:120,9:121,30:[1,123],35:122,41:119,48:$V7,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk},{67:[1,124]},{17:97,18:98,21:99,30:$Vr,32:126,40:$Vs,44:$VM,65:125,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:126,40:$Vs,44:$VM,65:127,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,90]),o($VK,[2,95]),{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,59:[1,128],64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},o($VN,[2,87]),{40:[1,129]},{40:[1,130]},{8:[2,40],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{17:97,18:98,21:99,30:$Vr,32:146,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,104]),o($VK,[2,105]),o($VK,[2,106]),o($VK,[2,107]),o($VK,[2,108]),o($VK,[2,109]),o($VK,[2,110],{31:[1,149],40:[1,147],74:$Vp,75:[1,148],79:$Vq}),{17:97,18:98,21:99,30:$Vr,32:150,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,121]),o($VK,[2,122]),o($VK,[2,123]),{17:97,18:98,21:99,30:$Vr,32:151,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{40:[1,152]},{40:[1,153]},{40:[1,154]},{35:155,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk},{34:[1,156],38:$VH},o($VI,$VJ),{17:97,18:98,21:99,30:$Vr,32:157,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{30:[1,158]},o($V11,$V21,{50:159,35:160,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk}),{33:[1,161]},o([8,44],[2,51],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01}),{40:[1,162]},{40:[1,163]},{40:[1,164]},{33:[1,165],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,166],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,167],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,168],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{8:[1,170],42:169},{8:[2,34]},{8:[2,35]},{30:$VG,49:67},{34:$Vo},{40:[1,171]},{44:[1,172]},{44:[2,77],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,173]},o($VN,[2,86]),o($V11,$V21,{35:160,50:174,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk}),o($V11,$V31,{17:97,18:98,21:99,47:175,32:176,30:$Vr,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE}),{17:97,18:98,21:99,30:$Vr,32:177,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:178,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:179,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:180,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:181,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:182,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:183,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:184,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:185,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:186,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:187,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:188,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:189,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:190,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:191,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,103]),o($V11,$V31,{17:97,18:98,21:99,32:176,47:192,30:$Vr,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE}),{76:$VL,105:[1,193]},{17:97,18:98,21:99,30:$Vr,32:194,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,120]),{44:[1,195],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{17:97,18:98,21:99,30:$Vr,32:196,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:197,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:198,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{31:[1,199]},{17:97,18:98,21:99,30:$Vr,32:200,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{8:[2,47],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},o($VI,[2,49]),{38:$V41,44:[1,201]},{30:[1,203]},{31:[1,205],34:[1,204]},{17:97,18:98,21:99,30:$Vr,32:206,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{44:[1,207]},{17:97,18:98,21:99,30:$Vr,32:208,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{31:[1,210],34:[1,209]},{2:$V51,7:212,9:213,16:214,17:215,21:216,22:217,24:218,25:$V61,26:$V71,27:221,30:$V81,35:122,45:$V5,46:$V6,48:$V7,54:211,57:$Vb,64:$Vc,66:$Vd,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},{57:[1,224]},{22:225,57:$Vb},{8:[1,227],43:226},{17:97,18:98,21:99,30:$Vr,32:228,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:229,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{8:[2,75]},{8:[2,76]},{38:$V41,44:[1,230]},{38:$V91,44:[1,231]},o($V11,[2,44],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01}),o($Va1,[2,97],{82:$VQ,83:$VR,84:$VS,85:$VT}),o($Va1,[2,98],{82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vb1,[2,99],{84:$VS}),o($Vb1,[2,100],{84:$VS}),o($VK,[2,101]),o($Vb1,[2,102],{84:$VS}),o($Vc1,[2,111],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vc1,[2,112],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vc1,[2,113],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vc1,[2,114],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vc1,[2,115],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vc1,[2,116],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o([8,33,38,44,62,98,99],[2,117],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,100:$V01}),o([8,33,38,44,62,99],[2,118],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,100:$V01}),o([8,33,38,44,62,98,99,100],[2,119],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ}),{38:$V91,44:[1,233]},{40:[1,234]},{33:[1,235],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},o($VK,[2,124]),{44:[1,236],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,237],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,238],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{17:97,18:98,21:99,30:$Vr,32:239,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{8:[2,46],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{51:240,57:$Vd1},{35:242,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk},o($V11,[2,54]),{31:$Ve1,36:243,106:$Vf1},{33:[1,246]},{44:[1,247],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{8:[2,93]},{38:[1,248],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{17:97,18:98,21:99,30:$Vr,32:249,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:250,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($Vn,[2,56],{55:[1,251]}),{8:[1,252]},{8:[1,253]},{8:[1,254]},{8:[1,255]},{8:[1,256]},o($VN,[2,64]),{8:[1,257]},{8:[1,258]},{8:[1,259]},{8:[1,260]},{8:[1,261]},{34:$Vo,74:$Vp,79:$Vq},{58:262,60:263,61:$Vg1,63:$Vh1},o($Vn,[2,79]),{44:[1,266]},{9:269,17:267,21:268,30:$V81,74:$Vl,79:$Vm},{8:[2,36],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{44:[1,270],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{51:271,57:$Vd1},{8:[2,42]},{17:97,18:98,21:99,30:$Vr,32:272,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,125]),{17:97,18:98,21:99,30:$Vr,32:273,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($VK,[2,131],{31:[1,274]}),o($VK,[2,126]),o($VK,[2,127]),o($VK,[2,128]),{33:[1,275],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},o($Vn,[2,48]),{2:$V0,4:276,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,59:[1,277],64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},{30:[1,278]},{8:[2,29]},{35:279,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk},{17:97,18:98,21:99,30:$Vr,31:[1,281],32:282,37:280,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{34:[1,283]},o($VK,[2,92]),{17:97,18:98,21:99,30:$Vr,32:284,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{8:[2,27],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{33:[1,285],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{2:$V51,7:212,9:213,10:287,16:214,17:215,21:216,22:217,24:218,25:$V61,26:$V71,27:221,30:$V81,35:122,45:$V5,46:$V6,48:$V7,53:$V9,54:286,57:$Vb,64:$Vc,66:$Vd,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},o($VN,[2,59]),o($VN,[2,60]),o($VN,[2,61]),o($VN,[2,62]),o($VN,[2,63]),o($VN,[2,65]),o($VN,[2,66]),o($VN,[2,67]),o($VN,[2,68]),o($VN,[2,69]),{59:[1,288],60:289,61:$Vg1,63:$Vh1},o($Vi1,[2,72]),{17:97,18:98,21:99,30:$Vr,32:290,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{62:[1,291]},{22:292,57:$Vb},{44:[2,37]},{44:[2,38]},{44:[2,39]},{8:[2,80]},o($Vn,[2,52]),o($V11,[2,43],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01}),{44:[1,293],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{17:97,18:98,21:99,30:$Vr,32:294,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{31:[1,295]},{2:$V0,6:49,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,59:[1,296],64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},o($Vn,[2,89]),o($V11,[2,53]),{31:[1,297]},{33:[1,298],38:$Vj1},{17:97,18:98,21:99,30:$Vr,32:282,37:300,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($Vk1,[2,32],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01}),{31:$Ve1,36:301,106:$Vf1},{44:[1,302],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{34:[1,303]},o($Vn,[2,57]),o($Vn,[2,58]),o($Vn,[2,70]),o($Vi1,[2,71]),{62:[1,304],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{2:$V0,4:305,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},o($Vn,[2,33]),o($VK,[2,129]),{33:[1,306],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{17:97,18:98,21:99,30:$Vr,32:307,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},o($Vn,[2,88]),{17:97,18:98,21:99,30:$Vr,32:308,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{8:[2,135]},{17:97,18:98,21:99,30:$Vr,32:309,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{33:[1,310],38:$Vj1},{8:[2,30]},{8:[2,94]},{17:97,18:98,21:99,30:$Vr,32:311,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{2:$V0,4:312,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,27:23,28:24,29:25,30:$V3,35:28,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm},o($Vi1,[2,74],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,27:23,28:24,29:25,35:28,6:49,2:$V0,25:$V1,26:$V2,30:$V3,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm}),o($VK,[2,132]),{33:[1,313],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{33:[1,314],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},o($Vk1,[2,31],{80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01}),{38:[1,315]},{8:[2,28],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},o($Vi1,[2,73],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,27:23,28:24,29:25,35:28,6:49,2:$V0,25:$V1,26:$V2,30:$V3,39:$V4,45:$V5,46:$V6,48:$V7,52:$V8,53:$V9,56:$Va,57:$Vb,64:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,79:$Vm}),o($VK,[2,130]),{8:[2,134],31:[1,316]},{31:[1,317]},{17:97,18:98,21:99,30:$Vr,32:318,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{17:97,18:98,21:99,30:$Vr,32:282,37:319,40:$Vs,74:$Vl,79:$Vm,81:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,106:$VE},{33:[1,320],80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,92:$VU,93:$VV,94:$VW,95:$VX,96:$VY,97:$VZ,98:$V_,99:$V$,100:$V01},{33:[1,321],38:$Vj1},{8:[2,133]},{33:[1,322]},{8:[2,136]}],
defaultActions: {48:[2,1],120:[2,34],121:[2,35],172:[2,75],173:[2,76],207:[2,93],231:[2,42],243:[2,29],267:[2,37],268:[2,38],269:[2,39],270:[2,80],298:[2,135],301:[2,30],302:[2,94],320:[2,133],322:[2,136]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignacion} = require('../instrucciones/asignar');
    const {If} = require('../instrucciones/if');
    const {Print} = require('../instrucciones/print');
    const {Switch} = require('../instrucciones/switch');
    const {Bloque} = require('../instrucciones/bloque')
    const {BloqueBreak} = require('../instrucciones/bloquebreak')
    const {While} = require('../instrucciones/while')
    const {For} = require('../instrucciones/for')
    const {DoWhile} = require('../instrucciones/dowhile')
    const {Metodo} = require('../instrucciones/metodo')
    const {Funcion} = require('../instrucciones/funcion')
    const {CaseSwitch} = require('../instrucciones/caseswitch')
    const {Break} = require('../instrucciones/break')
    const {Continue} = require('../instrucciones/continue')
    const {Return} = require('../instrucciones/return')
    const {Llamada} = require('../instrucciones/llamada')
    const {Declaracion_array} = require('../instrucciones/array_declaracion')
    const {Asignacion_array} = require('../instrucciones/array_asignacion')
    const {Pop} = require('../instrucciones/pop')
    const {Splice} = require('../instrucciones/splice')

    const {Type} = require('../symbols/type');

    const {Literal} = require('../expresiones/literal')
    const {ArrayValues} = require('../expresiones/arrayValues')
    const {ArrayRetorno} = require('../expresiones/arrayRetorno')
    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');
    const {Identificador} = require('../expresiones/identificador');
    const {Typeof} = require('../expresiones/typeof')
    const {Length} = require('../expresiones/length')
    const {ToCharArray} = require('../expresiones/toCharArray')
    const {IndexOf} = require('../expresiones/indexOf')
    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');
    const {Logical} = require('../expresiones/logical');
    const {LogicalOption} = require('../expresiones/logicalOptions');
    const {Incremento} = require('../expresiones/incremento');
    const {Push} = require('../expresiones/push');
    const {IncrementOption} = require('../expresiones/incrementOptions');
    const {Decremento} = require('../expresiones/decremento');
    const {DecrementOption} = require('../expresiones/decrementOptions');


    const {Issue} = require('../error/issue');
    const {Singleton} = require('../patron_singleton/singleton');
    var array_erroresLexicos;
    var tipoDeclaracion;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 69;
break;
case 4:return 70;
break;
case 5:return 72;
break;
case 6:return 71;
break;
case 7:return 73;
break;
case 8:return 64;
break;
case 9:return 66;
break;
case 10:return 48;
break;
case 11:return 53;
break;
case 12:return 55;
break;
case 13:return 90;
break;
case 14:return 91;
break;
case 15:return 68;
break;
case 16:return 67;
break;
case 17:return 56
break;
case 18:return 61
break;
case 19:return 63
break;
case 20:return 25
break;
case 21:return 26
break;
case 22:return 52
break;
case 23:return 46
break;
case 24:return 45
break;
case 25:return 102
break;
case 26:return 103
break;
case 27:return 104
break;
case 28:return 105
break;
case 29:return 39
break;
case 30:return 106
break;
case 31:return 76
break;
case 32:return 77
break;
case 33:return 78
break;
case 34:return 38;
break;
case 35:return 75;
break;
case 36:return 8;
break;
case 37:return 62;
break;
case 38:return 57;
break;
case 39:return 59;
break;
case 40:return 40;
break;
case 41:return 44;
break;
case 42:return 31;
break;
case 43:return 33;
break;
case 44:return 84;
break;
case 45:return 85;
break;
case 46:return 74;
break;
case 47:return 80;
break;
case 48:return 79;
break;
case 49:return 81;
break;
case 50:return 82;
break;
case 51:return 83;
break;
case 52:return 98;
break;
case 53:return 99;
break;
case 54:return 100;
break;
case 55:return 96;
break;
case 56:return 94;
break;
case 57:return 97;
break;
case 58:return 95;
break;
case 59:return 92;
break;
case 60:return 34;
break;
case 61:return 93;
break;
case 62:return 101;
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 89; 
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 88; 
break;
case 65:return 87;
break;
case 66:return 86;
break;
case 67:return 30;
break;
case 68:return 5;
break;
case 69: 
                        // console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        const singleton = Singleton.getInstance();
                        const error = new Issue("Lexico", "Caracter que lo proboco: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1); 
                        singleton.add_errores(error);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:typeof\b)/i,/^(?:length\b)/i,/^(?:toCharArray\b)/i,/^(?:indexOf\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9'_']*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}