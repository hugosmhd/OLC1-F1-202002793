/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,17],$V2=[1,34],$V3=[1,33],$V4=[1,22],$V5=[1,20],$V6=[1,32],$V7=[1,23],$V8=[1,24],$V9=[1,31],$Va=[1,27],$Vb=[1,28],$Vc=[1,25],$Vd=[1,26],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,29],$Vk=[1,30],$Vl=[2,5,21,23,25,26,31,37,38,41,42,44,46,48,49,51,52,53,54,55,56,57,58,59,60],$Vm=[1,56],$Vn=[1,57],$Vo=[1,78],$Vp=[1,82],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,79],$Vy=[1,83],$Vz=[1,85],$VA=[1,87],$VB=[30,34],$VC=[2,30],$VD=[8,29,30,47,61,62,63,64,65,66,73,74,75,76,77,78,79,80,81],$VE=[2,57],$VF=[2,5,21,23,25,26,31,37,38,40,41,42,44,46,48,49,51,52,53,54,55,56,57,58,59,60],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,113],$VU=[1,114],$VV=[29,30],$VW=[2,35],$VX=[2,25],$VY=[1,154],$VZ=[1,166],$V_=[1,164],$V$=[1,173],$V01=[8,29,30,47,61,62,73,74,75,76,77,78,79,80,81],$V11=[8,29,30,47,61,62,63,64,66,73,74,75,76,77,78,79,80,81],$V21=[8,29,30,47,73,74,75,76,77,78,79,80,81],$V31=[1,177],$V41=[1,191],$V51=[1,192],$V61=[44,46,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptcoma":8,"ASIGNACION":9,"IF":10,"SWITCH":11,"FUNCIONES":12,"WHILE":13,"DOWHILE":14,"PRINT":15,"INCREMENT":16,"DECREMENT":17,"BLOQUEINSTRUCCIONES":18,"METODOS":19,"LLAMADA_METODO":20,"pr_break":21,"RETURN":22,"pr_return":23,"EXPRESION":24,"pr_call":25,"identificador":26,"pabre":27,"LISTA_PASO_PARAMETROS":28,"pcierra":29,"coma":30,"pr_const":31,"TIPODATO":32,"IDS":33,"igual":34,"LISTA_PARAMETROS":35,"BLOQUE":36,"pr_void":37,"pr_if":38,"IF_INSTRUCCIONES":39,"pr_else":40,"pr_switch":41,"llabre":42,"LISTACASE":43,"llcierra":44,"CASEBLOQUE":45,"pr_case":46,"dospts":47,"pr_default":48,"pr_print":49,"EXP_PRINT":50,"pr_println":51,"pr_while":52,"pr_do":53,"pr_int":54,"pr_double":55,"pr_boolean":56,"pr_char":57,"pr_string":58,"masmas":59,"menosmenos":60,"mas":61,"menos":62,"por":63,"div":64,"pot":65,"modulo":66,"entero":67,"decimal":68,"caracter":69,"cadena":70,"pr_true":71,"pr_false":72,"igualigual":73,"diferente":74,"menorque":75,"mayorque":76,"menorigual":77,"mayorigual":78,"and":79,"or":80,"xor":81,"not":82,"pr_typeof":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",21:"pr_break",23:"pr_return",25:"pr_call",26:"identificador",27:"pabre",29:"pcierra",30:"coma",31:"pr_const",34:"igual",37:"pr_void",38:"pr_if",40:"pr_else",41:"pr_switch",42:"llabre",44:"llcierra",46:"pr_case",47:"dospts",48:"pr_default",49:"pr_print",51:"pr_println",52:"pr_while",53:"pr_do",54:"pr_int",55:"pr_double",56:"pr_boolean",57:"pr_char",58:"pr_string",59:"masmas",60:"menosmenos",61:"mas",62:"menos",63:"por",64:"div",65:"pot",66:"modulo",67:"entero",68:"decimal",69:"caracter",70:"cadena",71:"pr_true",72:"pr_false",73:"igualigual",74:"diferente",75:"menorque",76:"mayorque",77:"menorigual",78:"mayorigual",79:"and",80:"or",81:"xor",82:"not",83:"pr_typeof"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[22,2],[22,1],[20,5],[28,3],[28,1],[28,0],[7,5],[7,4],[12,6],[33,3],[33,1],[9,3],[19,6],[35,4],[35,2],[35,0],[10,5],[10,7],[10,7],[39,2],[39,2],[39,2],[39,2],[39,2],[39,1],[39,2],[39,2],[39,2],[39,2],[11,7],[43,2],[43,1],[45,4],[45,3],[15,4],[15,4],[50,1],[50,0],[13,5],[14,6],[32,1],[32,1],[32,1],[32,1],[32,1],[18,3],[18,2],[36,3],[36,2],[16,2],[16,2],[17,2],[17,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,1],[24,3],[24,4],[24,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];        
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 10: case 12: case 13: case 16: case 18: case 39: case 40: case 42: case 43: case 45: case 47:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 9: case 14: case 15: case 44:
 this.$=$$[$0]; 
break;
case 17: case 46:
 this.$= new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 19: case 48:
 
        const singleton = Singleton.getInstance();
        var errors = new Issue("Sintactico", "Error sintactico, verificar entrada", this._$.first_line, this._$.first_column + 1); 
        singleton.add_errores(errors); 
break;
case 20:
 this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 21:
 this.$= new Return(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 22:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column )
break;
case 23: case 29:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 24: case 30: case 51:
this.$ = [$$[$0]]
break;
case 25: case 35:
this.$ = []
break;
case 26:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 27:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 28:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 31:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 32:
this.$= new Metodo(null, $$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 33:
$$[$0-3].push({'tipo': $$[$0-1], 'id': $$[$0]}); this.$ = $$[$0-3]
break;
case 34:
this.$ = [{'tipo': $$[$0-1], 'id': $$[$0]}]
break;
case 36:
this.$ = new If($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 37: case 38:
 this.$ = new If($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 49:
this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 50:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]
break;
case 52:
this.$ = new CaseSwitch("case", $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 53:
this.$ = new CaseSwitch("default", null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 54:
this.$ = new Print(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55:
this.$ = new Print(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56: case 97: case 98:
this.$ = $$[$0]
break;
case 58:
this.$ = new While($$[$0-2], $$[$0]);
break;
case 59:
this.$ = new DoWhile($$[$0-1], $$[$0-4]);
break;
case 60:
this.$=Type.INT;
break;
case 61:
this.$=Type.DOUBLE;
break;
case 62:
this.$=Type.BOOLEAN;
break;
case 63:
this.$=Type.CHAR;
break;
case 64:
this.$=Type.STRING;
break;
case 65: case 67:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 66: case 68:
 this.$= new Bloque(null,_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 69:
this.$ = new Incremento($$[$0], IncrementOption.MASMAS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 70:
this.$ = new Incremento($$[$0-1], IncrementOption.MASMAS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 71:
this.$ = new Decremento($$[$0], DecrementOption.MENOSMENOS_PRE, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 72:
this.$ = new Decremento($$[$0-1], DecrementOption.MENOSMENOS_POST, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$= new Arithmetic($$[$0],null,ArithmeticOption.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 80:
this.$=new Literal($$[$0],Type.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 81:
this.$=new Literal($$[$0],Type.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 82:
this.$=new Literal($$[$0],Type.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 83:
this.$=new Literal($$[$0],Type.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 84: case 85:
this.$=new Literal($$[$0],Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 86:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 87:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new Logical($$[$0-2], $$[$0], LogicalOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$ = new Logical($$[$0], null, LogicalOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 99:
this.$ = $$[$0-1]
break;
case 100:
this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 101:
 this.$= new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{1:[3]},{2:$V0,5:[1,40],6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vl,[2,3]),{8:[1,42]},{8:[1,43]},o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},o($Vl,[2,14]),o($Vl,[2,15]),{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{32:52,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi},{26:[1,54],33:53},{34:[1,55],59:$Vm,60:$Vn},{27:[1,58]},{27:[1,59]},{27:[1,60]},{18:61,42:$V9},{27:[1,62]},{27:[1,63]},{26:[1,64]},{26:[1,65]},{2:$V0,4:66,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,44:[1,67],49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{26:[1,68]},{26:[1,69]},{8:[2,21],16:80,17:81,24:70,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{26:[2,60]},{26:[2,61]},{26:[2,62]},{26:[2,63]},{26:[2,64]},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),{26:$Vz,33:84},{30:$VA,34:[1,86]},o($VB,$VC,{27:[1,88]}),{16:80,17:81,24:89,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},o($VD,[2,70]),o($VD,[2,72]),{16:80,17:81,24:90,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:91,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:92,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{52:[1,93]},{16:80,17:81,24:95,26:$Vo,27:$Vp,29:$VE,50:94,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:95,26:$Vo,27:$Vp,29:$VE,50:96,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},o($VD,[2,69]),o($VD,[2,71]),{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,44:[1,97],49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($VF,[2,66]),{27:[1,98]},{27:[1,99]},{8:[2,20],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{16:80,17:81,24:115,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VD,[2,83]),o($VD,[2,84]),o($VD,[2,85]),o($VD,[2,86],{27:[1,116],59:$Vm,60:$Vn}),{16:80,17:81,24:117,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},o($VD,[2,97]),o($VD,[2,98]),{16:80,17:81,24:118,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{27:[1,119]},{30:$VA,34:[1,120]},o($VB,$VC),{16:80,17:81,24:121,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{26:[1,122]},o($VV,$VW,{35:123,32:124,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi}),{8:[2,31],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:[1,125],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:[1,126],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:[1,127],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{27:[1,128]},{29:[1,129]},{29:[2,56],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:[1,130]},o($VF,[2,65]),o($VV,$VW,{32:124,35:131,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi}),o($VV,$VX,{16:80,17:81,28:132,24:133,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy}),{16:80,17:81,24:134,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:135,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:136,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:137,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:138,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:139,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:140,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:141,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:142,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:143,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:144,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:145,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:146,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:147,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:148,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},o($VD,[2,79]),o($VV,$VX,{16:80,17:81,24:133,28:149,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy}),o($VD,[2,96]),{29:[1,150],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{16:80,17:81,24:151,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{16:80,17:81,24:152,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{8:[2,27],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($VB,[2,29]),{29:[1,153],30:$VY},{26:[1,155]},{2:$VZ,7:157,9:158,15:159,16:160,17:161,18:162,20:163,21:$V_,22:165,23:$V2,25:$V3,26:$V4,31:$V5,32:167,39:156,42:$V9,49:$Va,51:$Vb,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{42:[1,168]},{18:169,42:$V9},{16:80,17:81,24:170,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{8:[2,54]},{8:[2,55]},{29:[1,171],30:$VY},{29:[1,172],30:$V$},o($VV,[2,24],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU}),o($V01,[2,73],{63:$VI,64:$VJ,65:$VK,66:$VL}),o($V01,[2,74],{63:$VI,64:$VJ,65:$VK,66:$VL}),o($V11,[2,75],{65:$VK}),o($V11,[2,76],{65:$VK}),o($VD,[2,77]),o($V11,[2,78],{65:$VK}),o($V21,[2,87],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL}),o($V21,[2,88],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL}),o($V21,[2,89],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL}),o($V21,[2,90],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL}),o($V21,[2,91],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL}),o($V21,[2,92],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL}),o([8,29,30,47,79,80],[2,93],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,81:$VU}),o([8,29,30,47,80],[2,94],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,81:$VU}),o([8,29,30,47,79,80,81],[2,95],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR}),{29:[1,174],30:$V$},o($VD,[2,99]),{29:[1,175],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{8:[2,26],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{36:176,42:$V31},{32:178,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi},o($VV,[2,34]),o($Vl,[2,36],{40:[1,179]}),{8:[1,180]},{8:[1,181]},{8:[1,182]},{8:[1,183]},{8:[1,184]},o($VF,[2,44]),{8:[1,185]},{8:[1,186]},{8:[1,187]},{8:[1,188]},{26:$Vz,33:53},{43:189,45:190,46:$V41,48:$V51},o($Vl,[2,58]),{29:[1,193],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{36:194,42:$V31},{8:[2,22]},{16:80,17:81,24:195,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},o($VD,[2,100]),o($VD,[2,101]),o($Vl,[2,28]),{2:$V0,4:196,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,44:[1,197],49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},{26:[1,198]},{2:$VZ,7:157,9:158,10:200,15:159,16:160,17:161,18:162,20:163,21:$V_,22:165,23:$V2,25:$V3,26:$V4,31:$V5,32:167,38:$V7,39:199,42:$V9,49:$Va,51:$Vb,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),{44:[1,201],45:202,46:$V41,48:$V51},o($V61,[2,51]),{16:80,17:81,24:203,26:$Vo,27:$Vp,59:$Vj,60:$Vk,62:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,82:$Vx,83:$Vy},{47:[1,204]},{8:[2,59]},o($Vl,[2,32]),o($VV,[2,23],{61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU}),{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,44:[1,205],49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vl,[2,68]),o($VV,[2,33]),o($Vl,[2,37]),o($Vl,[2,38]),o($Vl,[2,49]),o($V61,[2,50]),{47:[1,206],61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{2:$V0,4:207,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($Vl,[2,67]),{2:$V0,4:208,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V1,22:18,23:$V2,25:$V3,26:$V4,31:$V5,32:21,37:$V6,38:$V7,41:$V8,42:$V9,49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk},o($V61,[2,53],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:18,32:21,6:41,2:$V0,21:$V1,23:$V2,25:$V3,26:$V4,31:$V5,37:$V6,38:$V7,41:$V8,42:$V9,49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk}),o($V61,[2,52],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:18,32:21,6:41,2:$V0,21:$V1,23:$V2,25:$V3,26:$V4,31:$V5,37:$V6,38:$V7,41:$V8,42:$V9,49:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk})],
defaultActions: {35:[2,60],36:[2,61],37:[2,62],38:[2,63],39:[2,64],40:[2,1],129:[2,54],130:[2,55],172:[2,22],193:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignacion} = require('../instrucciones/asignar');
    const {If} = require('../instrucciones/if');
    const {Print} = require('../instrucciones/print');
    const {Switch} = require('../instrucciones/switch');
    const {Bloque} = require('../instrucciones/bloque')
    const {BloqueBreak} = require('../instrucciones/bloquebreak')
    const {While} = require('../instrucciones/while')
    const {DoWhile} = require('../instrucciones/dowhile')
    const {Metodo} = require('../instrucciones/metodo')
    const {Funcion} = require('../instrucciones/funcion')
    const {CaseSwitch} = require('../instrucciones/caseswitch')
    const {Break} = require('../instrucciones/break')
    const {Return} = require('../instrucciones/return')
    const {Llamada} = require('../instrucciones/llamada')

    const {Type} = require('../symbols/type');

    const {Literal} = require('../expresiones/literal')
    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');
    const {Identificador} = require('../expresiones/identificador');
    const {Typeof} = require('../expresiones/typeof')
    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');
    const {Logical} = require('../expresiones/logical');
    const {LogicalOption} = require('../expresiones/logicalOptions');
    const {Incremento} = require('../expresiones/incremento');
    const {IncrementOption} = require('../expresiones/incrementOptions');
    const {Decremento} = require('../expresiones/decremento');
    const {DecrementOption} = require('../expresiones/decrementOptions');


    const {Issue} = require('../error/issue');
    const {Singleton} = require('../patron_singleton/singleton');
    var array_erroresLexicos;
    var tipoDeclaracion;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 54;
break;
case 4:return 55;
break;
case 5:return 57;
break;
case 6:return 56;
break;
case 7:return 58;
break;
case 8:return 49;
break;
case 9:return 51;
break;
case 10:return 31;
break;
case 11:return 38;
break;
case 12:return 40;
break;
case 13:return 71;
break;
case 14:return 72;
break;
case 15:return 53;
break;
case 16:return 52;
break;
case 17:return 41
break;
case 18:return 46
break;
case 19:return 48
break;
case 20:return 21
break;
case 21:return 37
break;
case 22:return 25
break;
case 23:return 23
break;
case 24:return 83
break;
case 25:return 30;
break;
case 26:return 8;
break;
case 27:return 47;
break;
case 28:return 42;
break;
case 29:return 44;
break;
case 30:return 27;
break;
case 31:return 29;
break;
case 32:return 65;
break;
case 33:return 66;
break;
case 34:return 59;
break;
case 35:return 61;
break;
case 36:return 60;
break;
case 37:return 62;
break;
case 38:return 63;
break;
case 39:return 64;
break;
case 40:return 79;
break;
case 41:return 80;
break;
case 42:return 81;
break;
case 43:return 77;
break;
case 44:return 75;
break;
case 45:return 78;
break;
case 46:return 76;
break;
case 47:return 73;
break;
case 48:return 34;
break;
case 49:return 74;
break;
case 50:return 82;
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 53:return 68;
break;
case 54:return 67;
break;
case 55:return 26;
break;
case 56:return 5;
break;
case 57: 
                        // console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        const singleton = Singleton.getInstance();
                        const error = new Issue("Lexico", "Caracter que lo proboco: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1); 
                        singleton.add_errores(error);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:typeof\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9'_']*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}